{"version":3,"sources":["exportToGif.ts","exportToHtml.ts","Claymate.tsx","creation.ts","persistence.ts","useScenes.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["exportToGif","scenes","Promise","resolve","gif","GIF","forEach","scene","index","last","length","addFrame","imageData","delay","on","blob","fileSave","fileName","then","render","exportToHtml","options","a","html","svg","exportToSvg","drawing","animate","animateSvg","elements","filter","element","isDeleted","id","style","display","outerHTML","Blob","type","Preview","ref","useRef","useEffect","current","ctx","getContext","putImageData","width","height","Claymate","currentIndex","updateScenes","moveToScene","addScene","exportGif","exportHtml","className","map","testId","isEmpty","key","onClick","data-testid","aria-label","disabled","event","stopPropagation","findIndex","sc","remainingScenes","newCurrent","undefined","deletingCurrentScene","sourceIndex","prev","item","deleteScene","tmp","moveLeft","moveRight","reverse","createScene","size","canvas","exportToCanvas","nanoid","getImageData","loadStorage","firstScene","drawings","JSON","parse","localStorage","getItem","appState","collaborators","Map","data","e","loadDrawingFromStorage","useScenes","useState","initialised","setInitialised","drawingVersion","setDrawingVersion","setCurrentIndex","setScenes","setDrawing","initialScenes","result","stringify","s","setItem","saveStorage","requiredWidth","requiredHeight","onRestore","useCallback","version","updater","currentScene","onChange","isEqual","update","el","initialData","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f00e338d.chunk.js","sourcesContent":["import { fileSave } from \"browser-fs-access\";\n// @ts-ignore\nimport GIF from \"gif.js/dist/gif\";\n\nimport { Scene } from \"./types\";\n\nexport const exportToGif = (scenes: Scene[]) =>\n  new Promise((resolve) => {\n    const gif = new GIF();\n    scenes.forEach((scene, index) => {\n      const last = index + 1 === scenes.length;\n      gif.addFrame(scene.imageData, { delay: last ? 2000 : 500 });\n    });\n    gif.on(\"finished\", (blob: Blob) => {\n      fileSave(blob, {\n        fileName: \"excalidraw-claymate.gif\",\n      }).then(resolve);\n    });\n    gif.render();\n  });\n","import { fileSave } from \"browser-fs-access\";\nimport { exportToSvg } from \"@excalidraw/excalidraw\";\nimport type {\n  ExcalidrawElement,\n  NonDeletedExcalidrawElement,\n} from \"@excalidraw/excalidraw/types/element/types\";\nimport { animateSvg } from \"excalidraw-animate/dist/library\";\n\nimport { Scene } from \"./types\";\n\nconst getNonDeletedElements = (\n  elements: readonly ExcalidrawElement[]\n): NonDeletedExcalidrawElement[] =>\n  elements.filter(\n    (element): element is NonDeletedExcalidrawElement => !element.isDeleted\n  );\n\ntype Options = {\n  animate?: boolean;\n};\n\nexport const exportToHtml = async (scenes: Scene[], options: Options) => {\n  let html = `<!DOCTYPE html>\n    <html lang=\"en\">\n      <style>\n        svg { width: 100%; height: 100%; }\n        body { margin: 0px; font-size: 24px; }\n        button { background: transparent; border: none; cursor: pointer; padding: 3px; margin: 0px 10px; font-size: inherit;}\n        #container { display: flex; flex-direction: column; height: 100%; }\n        #navigation { display: flex; justify-content: center; align-items: center; padding: 5px; border-top: 1px solid lightgray; background: white; }        \n        #rightbuttons { position: absolute; right: 10px; display: flex;  }\n        #slides { height: calc(100vh - 50px); }                \n      </style>\n      <script>\n        let index = 0;\n        let totalScenes = ${scenes.length}\n        function updateTitle() {\n          document.getElementById('title').innerText = '' + (index + 1) + ' of ' + totalScenes;\n        }\n        function moveLeft() {\n          if (index > 0) {\n            document.getElementById('scene' + index).style.display = 'none';\n            index -= 1;\n            document.getElementById('scene' + index).style.display = 'block';\n            updateTitle();\n            document.getElementById('scene' + index).setCurrentTime(0);\n          }\n        }\n        function moveRight() {\n          if (index < totalScenes - 1) {\n            document.getElementById('scene' + index).style.display = 'none';\n            index += 1;\n            document.getElementById('scene' + index).style.display = 'block';\n            updateTitle();\n            document.getElementById('scene' + index).setCurrentTime(0);\n          }\n        }\n        function closeNavigation() {\n          document.getElementById('navigation').style.display = 'none';\n          document.getElementById('slides').style.height = '100vh'\n        }\n        function toggleMaximise() {\n          if (document.fullscreenElement === document.body) {\n            document.exitFullscreen();\n          } else {\n            document.body.requestFullscreen();\n          }\n        }\n        document.addEventListener('DOMContentLoaded', () => {\n          document.getElementById('scene' + index).style.display = 'block';\n          document.getElementById('scene' + index).setCurrentTime(0);\n        });\n        document.addEventListener('keydown', (event) => {\n          if (event.key === 'ArrowRight') {\n            moveRight();\n          }\n          if (event.key === 'ArrowLeft') {\n            moveLeft();\n          }\n          if (event.key.toLowerCase() === 'f') {\n            toggleMaximise();            \n          }\n        });\n      </script>\n      <body>\n      <div id=\"container\">\n      <div id=\"slides\">\n  `;\n  scenes.forEach((scene, index) => {\n    const svg: SVGSVGElement = exportToSvg(scene.drawing);\n    if (options.animate) {\n      animateSvg(svg, getNonDeletedElements(scene.drawing.elements));\n    }\n    svg.id = `scene${index}`;\n    svg.style.display = \"none\";\n    html += svg.outerHTML;\n  });\n  html += `</div>\n            <div id=\"navigation\">\n              <button class=\"navbutton\" type=\"button\" onClick=\"moveLeft()\" title=\"Previous slide\">&#9664;</button>\n              <div id=\"title\">1 of ${scenes.length}</div>\n              <button class=\"navbutton\" type=\"button\" onClick=\"moveRight()\" title=\"Next slide\">&#9654;</button>          \n              <div id=\"rightbuttons\">\n                <button type=\"button\" onClick=\"toggleMaximise()\" title=\"Toggle full-screen\">&#x26F6;</button>\n                <button type=\"button\" onClick=\"closeNavigation()\" title=\"Close this panel\">&#x2716;</button>\n              <div>\n            </div>\n        </div></body></html>`;\n  await fileSave(new Blob([html], { type: \"text/html\" }), {\n    fileName: \"excalidraw-claymate.html\",\n  });\n};\n","import React, { useEffect, useRef } from \"react\";\n\nimport \"./Claymate.css\";\nimport { Drawing, Scene } from \"./types\";\nimport { exportToGif } from \"./exportToGif\";\nimport { exportToHtml } from \"./exportToHtml\";\nimport { isEmpty } from \"lodash\";\n\nconst Preview: React.FC<{ scene: Scene }> = ({ scene }) => {\n  const ref = useRef<HTMLCanvasElement>(null);\n  useEffect(() => {\n    if (!ref.current) return;\n    const ctx = ref.current.getContext(\"2d\");\n    if (!ctx) return;\n    ctx.putImageData(scene.imageData, 0, 0);\n  }, [scene]);\n  return <canvas ref={ref} width={scene.width} height={scene.height} />;\n};\n\ntype Props = {\n  currentIndex: number | undefined;\n  scenes: Scene[];\n  updateScenes: (\n    updater: (prev: Scene[]) => Scene[],\n    newCurrent?: { index: number; drawing: Drawing }\n  ) => void;\n  moveToScene: (index: number) => void;\n  addScene: () => void;\n};\n\nconst Claymate: React.FC<Props> = ({\n  scenes,\n  currentIndex,\n  updateScenes,\n  moveToScene,\n  addScene,\n}) => {\n  const exportGif = async () => {\n    await exportToGif(scenes);\n  };\n\n  const exportHtml = async (animate?: boolean) => {\n    await exportToHtml(scenes, { animate });\n  };\n\n  const deleteScene = (id: string) => {\n    const index = scenes.findIndex((sc) => sc.id === id);\n    if (index >= 0) {\n      const remainingScenes = scenes.length - 1;\n      if (remainingScenes > 0) {\n        let newCurrent;\n        if (currentIndex !== undefined) {\n          const deletingCurrentScene = index === currentIndex;\n          if (currentIndex > index || deletingCurrentScene) {\n            let sourceIndex = currentIndex;\n            if (deletingCurrentScene) {\n              if (currentIndex === remainingScenes) {\n                sourceIndex = currentIndex - 1;\n              } else if (currentIndex === 0) {\n                sourceIndex = 1;\n              }\n            }\n            newCurrent = {\n              index: currentIndex > 0 ? currentIndex - 1 : currentIndex,\n              drawing: scenes[sourceIndex].drawing,\n            };\n          }\n        }\n        updateScenes(\n          (prev: Scene[]) => prev.filter((item) => item.id !== id),\n          newCurrent\n        );\n      }\n    }\n  };\n\n  const moveLeft = (id: string) => {\n    const index = scenes.findIndex((item) => item.id === id);\n    updateScenes(\n      (prev) => {\n        const tmp = [...prev];\n        tmp[index - 1] = prev[index];\n        tmp[index] = prev[index - 1];\n        return tmp;\n      },\n      { index: index - 1, drawing: scenes[index].drawing }\n    );\n  };\n\n  const moveRight = (id: string) => {\n    const index = scenes.findIndex((item) => item.id === id);\n    updateScenes(\n      (prev) => {\n        const tmp = [...prev];\n        tmp[index + 1] = prev[index];\n        tmp[index] = prev[index + 1];\n        return tmp;\n      },\n      { index: index + 1, drawing: scenes[index].drawing }\n    );\n  };\n\n  const reverseOrder = () => {\n    updateScenes(\n      (prev) => [...prev].reverse(),\n      currentIndex !== undefined\n        ? {\n            index: scenes.length - 1 - currentIndex,\n            drawing: scenes[currentIndex].drawing,\n          }\n        : undefined\n    );\n  };\n\n  useEffect(() => {\n    if (scenes.length === 0) {\n      addScene();\n    }\n  }, [scenes, addScene]);\n\n  return (\n    <div className=\"Claymate\">\n      <div className=\"Claymate-scenes\">\n        {scenes.map((scene, index) => {\n          let testId = \"MissingId\";\n          if (!isEmpty(scenes[index].drawing.elements)) {\n            testId = scenes[index].drawing.elements[0].id;\n          }\n          return (\n            <div\n              key={scene.id}\n              className={`Claymate-scene ${\n                index === currentIndex ? \"Claymate-current-scene\" : \"\"\n              }`}\n              onClick={() => moveToScene(index)}\n              data-testid={testId}\n            >\n              <Preview scene={scene} />\n              <button\n                type=\"button\"\n                className=\"Claymate-delete\"\n                aria-label=\"Delete\"\n                disabled={scenes.length <= 1}\n                onClick={(event) => {\n                  event.stopPropagation();\n                  deleteScene(scene.id);\n                }}\n              >\n                &#x2716;\n              </button>\n              <button\n                type=\"button\"\n                className=\"Claymate-left\"\n                aria-label=\"Move Left\"\n                disabled={index === 0}\n                onClick={(event) => {\n                  event.stopPropagation();\n                  moveLeft(scene.id);\n                }}\n              >\n                &#x2b05;\n              </button>\n              <button\n                type=\"button\"\n                className=\"Claymate-right\"\n                aria-label=\"Move Right\"\n                disabled={index === scenes.length - 1}\n                onClick={(event) => {\n                  event.stopPropagation();\n                  moveRight(scene.id);\n                }}\n              >\n                &#x27a1;\n              </button>\n            </div>\n          );\n        })}\n      </div>\n      <div className=\"Claymate-buttons\">\n        <button type=\"button\" onClick={addScene}>\n          Add scene\n        </button>\n        <button\n          type=\"button\"\n          onClick={exportGif}\n          disabled={scenes.length === 0}\n        >\n          Export GIF\n        </button>\n        <div>\n          <button\n            type=\"button\"\n            onClick={() => exportHtml()}\n            disabled={scenes.length === 0}\n          >\n            Export HTML\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => exportHtml(true)}\n            disabled={scenes.length === 0}\n          >\n            (animate)\n          </button>\n        </div>\n        <button\n          type=\"button\"\n          onClick={reverseOrder}\n          disabled={scenes.length <= 1}\n        >\n          Reverse order\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Claymate;\n","import { nanoid } from \"nanoid\";\nimport { exportToCanvas } from \"@excalidraw/excalidraw\";\nimport { Drawing, Scene } from \"./types\";\n\nexport const createScene = (\n  drawing: Drawing,\n  size?: { width: number; height: number }\n): Scene | undefined => {\n  const canvas = exportToCanvas({ elements: drawing.elements });\n  const width = size ? size.width : canvas.width;\n  const height = size ? size.height : canvas.height;\n  const ctx = canvas.getContext(\"2d\");\n  if (ctx) {\n    return {\n      id: nanoid(),\n      width,\n      height,\n      imageData: ctx.getImageData(0, 0, width, height),\n      drawing,\n    };\n  }\n};\n","import { createScene } from \"./creation\";\nimport { Drawing, Scene } from \"./types\";\n\nconst ELEMENTS_STORAGE_KEY = \"excalidraw-elements\";\nconst SCENE_STORAGE_KEY = \"claymate-scenes\";\n\nconst loadDrawingFromStorage = (): Drawing | null => {\n  try {\n    const data = JSON.parse(localStorage.getItem(ELEMENTS_STORAGE_KEY) || \"\");\n    data.appState.collaborators = new Map();\n    return data;\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const loadStorage = (): Scene[] | null => {\n  try {\n    const drawings = JSON.parse(\n      localStorage.getItem(SCENE_STORAGE_KEY) || \"\"\n    ) as Drawing[];\n    if (drawings && drawings.length > 0) {\n      let firstScene: Scene | undefined;\n      return drawings.map((drawing) => {\n        drawing.appState.collaborators = new Map();\n        const scene = createScene(\n          drawing,\n          firstScene\n            ? { width: firstScene.width, height: firstScene.height }\n            : undefined\n        );\n        if (firstScene === undefined) {\n          firstScene = scene;\n        }\n        return scene;\n      }) as Scene[];\n    }\n  } catch {\n    try {\n      const drawing = loadDrawingFromStorage();\n      if (drawing) {\n        const scene = createScene(drawing);\n        if (scene) {\n          return [scene];\n        }\n      }\n    } catch {}\n  }\n  return null;\n};\n\nexport const saveStorage = (scenes: Scene[]) => {\n  const result = JSON.stringify(scenes.map((s) => s.drawing));\n  localStorage.setItem(SCENE_STORAGE_KEY, result);\n};\n","import { useCallback, useEffect, useState } from \"react\";\nimport { AppState } from \"@excalidraw/excalidraw/types/types\";\nimport { ExcalidrawElement } from \"@excalidraw/excalidraw/types/element/types\";\nimport isEqual from \"lodash/isEqual\";\nimport { createScene } from \"./creation\";\nimport { Drawing, Scene } from \"./types\";\nimport { loadStorage, saveStorage } from \"./persistence\";\n\nexport const useScenes = () => {\n  const [initialised, setInitialised] = useState(false);\n  const [drawingVersion, setDrawingVersion] = useState(0);\n  const [currentIndex, setCurrentIndex] = useState<number | undefined>(0);\n  const [scenes, setScenes] = useState<Scene[]>([]);\n  const [drawing, setDrawing] = useState<Drawing | undefined>();\n\n  useEffect(() => {\n    if (!initialised) {\n      const initialScenes = loadStorage();\n      if (initialScenes && initialScenes.length > 0) {\n        setScenes(initialScenes);\n        setCurrentIndex(0);\n        setDrawing(initialScenes[0].drawing);\n      }\n    }\n  }, [initialised, setInitialised]);\n\n  useEffect(() => {\n    saveStorage(scenes);\n  }, [scenes]);\n\n  const onRestore = useCallback((drawing: Drawing) => {\n    setDrawingVersion((version) => version + 1);\n    setDrawing(drawing);\n  }, []);\n\n  const moveToScene = useCallback(\n    (index: number) => {\n      onRestore(scenes[index].drawing);\n      setCurrentIndex(index);\n    },\n    [onRestore, setCurrentIndex, scenes]\n  );\n\n  const onChange = (\n    elements: readonly ExcalidrawElement[],\n    appState: AppState\n  ) => {\n    if (\n      drawing == null ||\n      !isEqual(elements, drawing.elements) ||\n      !isEqual(appState, drawing.appState)\n    ) {\n      const update = {\n        elements: elements.map((el) => {\n          return { ...(el as any) };\n        }),\n        appState: { ...(appState as any) },\n      };\n      setDrawing(update);\n    }\n  };\n\n  const updateScenes = useCallback(\n    (\n      updater: (prev: Scene[]) => Scene[],\n      newCurrent?: { index: number; drawing: Drawing }\n    ) => {\n      setScenes(updater);\n      if (newCurrent) {\n        onRestore(newCurrent.drawing);\n        setCurrentIndex(newCurrent.index);\n      }\n    },\n    [setCurrentIndex, onRestore, setScenes]\n  );\n\n  const currentScene =\n    currentIndex !== undefined && currentIndex < scenes.length\n      ? { ...scenes[currentIndex], drawing }\n      : undefined;\n\n  let requiredWidth: number | undefined;\n  let requiredHeight: number | undefined;\n  if (currentScene != null && scenes.length !== 1) {\n    requiredWidth = currentScene.width;\n    requiredHeight = currentScene.height;\n  }\n\n  useEffect(() => {\n    if (currentIndex != null && drawing) {\n      const scene = createScene(\n        drawing,\n        requiredWidth === undefined || requiredHeight === undefined\n          ? undefined\n          : {\n              width: requiredWidth,\n              height: requiredHeight,\n            }\n      );\n      if (scene) {\n        updateScenes((prev) => {\n          const result = [...prev];\n          result[currentIndex] = scene;\n          return result;\n        }, undefined);\n      }\n    }\n  }, [\n    drawing,\n    currentIndex,\n    scenes.length,\n    updateScenes,\n    requiredWidth,\n    requiredHeight,\n  ]);\n\n  const addScene = useCallback(() => {\n    if (drawing) {\n      const scene = createScene(\n        drawing,\n        scenes[0] && {\n          width: scenes[0].width,\n          height: scenes[0].height,\n        }\n      );\n      if (scene) {\n        updateScenes((prev) => [...prev, scene], {\n          index: scenes.length,\n          drawing: drawing,\n        });\n      }\n    }\n  }, [updateScenes, scenes, drawing]);\n\n  return {\n    initialised,\n    moveToScene,\n    addScene,\n    onChange,\n    drawingVersion,\n    currentIndex,\n    scenes,\n    updateScenes,\n    initialData: drawing,\n  };\n};\n","import React from \"react\";\nimport Excalidraw from \"@excalidraw/excalidraw\";\nimport \"./App.css\";\nimport Claymate from \"./Claymate\";\nimport { useScenes } from \"./useScenes\";\n\nconst App: React.FC = () => {\n  const {\n    moveToScene,\n    addScene,\n    onChange,\n    drawingVersion,\n    currentIndex,\n    initialData,\n    scenes,\n    updateScenes,\n  } = useScenes();\n\n  return (\n    <div className=\"ClaymateApp\">\n      <Excalidraw\n        key={drawingVersion}\n        initialData={initialData}\n        onChange={onChange}\n      />\n      <Claymate\n        scenes={scenes}\n        currentIndex={currentIndex}\n        updateScenes={updateScenes}\n        moveToScene={moveToScene}\n        addScene={addScene}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}