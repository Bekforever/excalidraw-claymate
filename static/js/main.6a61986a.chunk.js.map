{"version":3,"sources":["excalidraw/src/constants.ts","Image.tsx","excalidraw/src/element/typeChecks.ts","excalidraw/src/math.ts","excalidraw/src/element/bounds.ts","excalidraw/src/renderer/renderElement.ts","excalidraw/src/random.ts","excalidraw/src/element/mutateElement.ts","excalidraw/src/points.ts","excalidraw/src/element/sizeHelpers.ts","excalidraw/src/element/newElement.ts","excalidraw/src/i18n.ts","excalidraw/src/element/index.ts","excalidraw/src/keys.ts","excalidraw/src/scene/scrollbars.ts","excalidraw/src/scene/scroll.ts","excalidraw/src/scene/zoom.ts","excalidraw/src/scene/globalScene.ts","excalidraw/src/utils.ts","excalidraw/src/appState.ts","excalidraw/src/colors.ts","excalidraw/src/element/linearElementEditor.ts","excalidraw/src/renderer/renderScene.ts","excalidraw/src/scene/export.ts","excalidraw/src/clipboard.ts","excalidraw/src/data/restore.ts","excalidraw/src/data/index.ts","useDraggableSvg.ts","useSnapshots.ts","App.tsx","useLoadSvg.ts","serviceWorker.ts","index.tsx"],"names":["SCENE","EVENT","Image","React","memo","image","ref","useRef","useEffect","current","ele","appendChild","removeChild","isTextElement","element","type","isLinearElement","Math","PI","FONT_FAMILY","1","2","3","rotate","x1","y1","x2","y2","angle","cos","sin","distance2d","xd","yd","hypot","isPathALoop","points","length","firstPoint","lastPoint","getElementAbsoluteCoords","getLinearElementAbsoluteCoords","x","y","width","height","getDiamondPoints","topX","floor","rightX","rightY","getCurvePathOps","shape","sets","set","ops","getMinMaxXYFromCurvePathOps","transformXY","currentP","reduce","limits","op","data","p1","p2","p3","p0","equation","t","idx","pow","minY","min","minX","maxX","max","maxY","Infinity","getShapeForElement","getElementBounds","cx","cy","getLinearElementRotatedBounds","x11","y11","x12","y12","x22","y22","x21","y21","w","h","ww","hh","getCommonBounds","elements","forEach","getElementPointsCoords","curve","rough","generator","generateRoughOptions","DASHARRAY_DASHED","DASHARRAY_DOTTED","drawElementOnCanvas","rc","context","globalAlpha","opacity","draw","Error","font","getFontString","fillStyle","strokeColor","textAlign","lines","text","replace","split","lineHeight","verticalOffset","baseline","horizontalOffset","i","fillText","elementWithCanvasCache","WeakMap","shapeCache","get","options","seed","strokeLineDash","strokeStyle","undefined","disableMultiStroke","strokeWidth","fillWeight","hachureGap","roughness","stroke","fill","backgroundColor","curveFitting","generateElement","sceneState","delete","rectangle","topY","bottomX","bottomY","leftX","leftY","polygon","ellipse","prevOp","distance","nx","ny","arrowLength","total","px","py","minSize","xs","ys","x3","y3","getArrowPoints","x4","y4","push","line","zoom","prevElementWithCanvas","shouldRegenerateBecauseZoom","canvasZoom","shouldCacheIgnoreZoom","elementWithCanvas","canvas","document","createElement","getContext","canvasOffsetX","canvasOffsetY","window","devicePixelRatio","CANVAS_PADDING","translate","scale","generateElementCanvas","renderElementToSvg","rsvg","svgRoot","offsetX","offsetY","degree","node","setAttribute","group","ownerDocument","createElementNS","SVG_NS","textAnchor","textContent","getFontFamilyString","fontSize","random","Random","Date","now","randomInteger","next","randomId","nanoid","mutateElement","updates","didChange","key","map","point","getSizeFromPoints","value","prevPoints","nextPoints","didChangePoints","prevPoint","nextPoint","invalidateShapeForElement","version","versionNonce","globalSceneState","informMutation","isInvisiblySmallElement","newLng","_newElementBase","rest","id","isDeleted","groupIds","newTextElement","opts","metrics","measureText","fontFamily","getNonDeletedElements","test","navigator","platform","filter","languages","lng","label","require","rtl","currentLanguage","fallbackLanguage","findPartsForData","parts","part","path","replacement","translation","languageDetector","LanguageDetector","init","languageUtils","formatLanguageCode","isWhitelisted","checkWhitelist","detect","find","language","documentElement","dir","cacheUserLanguage","normalizeScroll","pos","calculateScrollCenter","appState","scrollX","scrollY","cords","sceneCoordsToViewportCoords","sceneX","sceneY","viewportX1","viewportY1","viewportX2","viewportY2","innerWidth","innerHeight","isOutsideViewPort","from","minDistance","closestElement","getClosestElementBounds","viewportCoordsToSceneCoords","clientX","clientY","centerX","centerY","getZoomOrigin","callbacks","Set","nonDeletedElements","elementsMap","this","getElement","isNonDeletedElement","nextElements","acc","Array","callback","cb","has","add","mockDateTime","getDateTime","date","year","getFullYear","month","getMonth","padStart","day","getDate","hr","getHours","getMinutes","body","style","position","whiteSpace","innerText","offsetWidth","offsetHeight","span","display","overflow","offsetTop","abs","zoomOrigin","getDefaultAppState","isLoading","errorMessage","draggingElement","resizingElement","multiElement","editingElement","editingLinearElement","elementType","elementLocked","exportBackground","shouldAddWatermark","currentItemStrokeColor","oc","black","currentItemBackgroundColor","currentItemFillStyle","currentItemStrokeWidth","currentItemStrokeStyle","currentItemRoughness","currentItemOpacity","currentItemFontSize","currentItemFontFamily","currentItemTextAlign","viewBackgroundColor","white","cursorX","cursorY","cursorButton","scrolledOutside","name","username","isCollaborating","isResizing","isRotating","selectionElement","openMenu","lastPointerDownWith","selectedElementIds","collaborators","Map","showShortcutsDialog","zenModeEnabled","editingGroupId","selectedGroupIds","shades","red","pink","grape","violet","indigo","blue","cyan","teal","green","lime","yellow","orange","LinearElementEditor","gray","elementId","activePointIndex","draggingElementPointIndex","lastUncommittedPoint","normalizePoints","getNonDeletedElement","setState","scenePointerX","scenePointerY","lastX","lastY","clickedPointIndex","getPointIndexUnderCursor","deltaX","deltaY","targetPoint","movePoint","event","history","ret","didAddPoint","hitElement","altKey","createPointAt","resumeRecording","newPoint","pointHandles","getPointsGlobalCoordinates","POINT_HANDLE_SIZE","rotatedX","rotatedY","_idx","pointIndex","targetPosition","slice","splice","nextCoords","prevCoords","nextCenterX","nextCenterY","prevCenterX","prevCenterY","rotated","exportToSvg","exportPadding","sceneElements","getWatermarkElement","innerHTML","rect","renderSceneToSvg","svg","textWidth","clipboard","HTMLCanvasElement","prototype","migrateElementWithProperties","extra","base","nextWidth","nextHeight","getNormalizedDimensions","migrateElement","fontPx","_fontFamily","parseInt","fontFamilyName","Object","entries","includes","getFontFamilyByName","isArray","restore","savedElements","savedState","migratedElement","scrollToContent","handle","getImportedKey","usage","crypto","subtle","importKey","alg","ext","k","key_ops","kty","importFromBackend","privateKey","a","fetch","response","ok","alert","arrayBuffer","buffer","iv","Uint8Array","decrypt","decrypted","string","TextDecoder","decode","JSON","parse","json","console","error","getMousePosition","CTM","getScreenCTM","e","f","d","warn","useDraggableSvg","containerRef","draggableElements","draggingElementIndex","childNodes","SVGElement","nodeType","Node","ELEMENT_NODE","transform","getAttribute","exec","unshift","addEventListener","index","findIndex","getClientRects","clientRect","match","Number","_event","makeDraggable","getSvgHtml","useCallback","resourceCache","embedUrlResources","urls","Promise","all","url","resolve","reject","then","blob","reader","FileReader","onload","resource","result","onerror","readAsDataURL","catch","resources","shift","count","App","useState","loading","setLoading","loadedSvg","setLoadedSvg","hash","location","searchParams","URLSearchParams","log","useLoadSvg","snapshots","setSnapshots","addSnapshot","svgHtml","html","src","btoa","prev","String","useSnapshots","className","onClick","snapshot","target","scrollIntoView","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6a61986a.chunk.js","sourcesContent":["export const DRAGGING_THRESHOLD = 10; // 10px\nexport const LINE_CONFIRM_THRESHOLD = 10; // 10px\nexport const ELEMENT_SHIFT_TRANSLATE_AMOUNT = 5;\nexport const ELEMENT_TRANSLATE_AMOUNT = 1;\nexport const TEXT_TO_CENTER_SNAP_THRESHOLD = 30;\nexport const SHIFT_LOCKING_ANGLE = Math.PI / 12;\nexport const CURSOR_TYPE = {\n  TEXT: \"text\",\n  CROSSHAIR: \"crosshair\",\n  GRABBING: \"grabbing\",\n  POINTER: \"pointer\",\n};\nexport const POINTER_BUTTON = {\n  MAIN: 0,\n  WHEEL: 1,\n  SECONDARY: 2,\n  TOUCH: -1,\n};\n\nexport enum SCENE {\n  INIT = \"SCENE_INIT\",\n  UPDATE = \"SCENE_UPDATE\",\n}\n\nexport enum EVENT {\n  COPY = \"copy\",\n  PASTE = \"paste\",\n  CUT = \"cut\",\n  KEYDOWN = \"keydown\",\n  KEYUP = \"keyup\",\n  MOUSE_MOVE = \"mousemove\",\n  RESIZE = \"resize\",\n  UNLOAD = \"unload\",\n  BLUR = \"blur\",\n  DRAG_OVER = \"dragover\",\n  DROP = \"drop\",\n  GESTURE_END = \"gestureend\",\n  BEFORE_UNLOAD = \"beforeunload\",\n  GESTURE_START = \"gesturestart\",\n  GESTURE_CHANGE = \"gesturechange\",\n  POINTER_MOVE = \"pointermove\",\n  POINTER_UP = \"pointerup\",\n  STATE_CHANGE = \"statechange\",\n  WHEEL = \"wheel\",\n  TOUCH_START = \"touchstart\",\n}\n\nexport const ENV = {\n  TEST: \"test\",\n  DEVELOPMENT: \"development\",\n};\n\nexport const BROADCAST = {\n  SERVER_VOLATILE: \"server-volatile-broadcast\",\n  SERVER: \"server-broadcast\",\n};\n\nexport const CLASSES = {\n  SHAPE_ACTIONS_MENU: \"App-menu__left\",\n};\n\n// 1-based in case we ever do `if(element.fontFamily)`\nexport const FONT_FAMILY = {\n  1: \"Virgil\",\n  2: \"Helvetica\",\n  3: \"Cascadia\",\n} as const;\n\nexport const CANVAS_ONLY_ACTIONS = [\"selectAll\"];\n","import React, { useEffect, useRef } from \"react\";\n\nexport const Image = React.memo<{\n  image: HTMLImageElement;\n}>(({ image }) => {\n  const ref = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (ref.current) {\n      const ele = ref.current;\n      ele.appendChild(image);\n      return () => {\n        ele.removeChild(image);\n      };\n    }\n    return undefined;\n  }, [image]);\n  return <div ref={ref}></div>;\n});\n","import {\n  ExcalidrawElement,\n  ExcalidrawTextElement,\n  ExcalidrawLinearElement,\n} from \"./types\";\n\nexport const isTextElement = (\n  element: ExcalidrawElement | null,\n): element is ExcalidrawTextElement => {\n  return element != null && element.type === \"text\";\n};\n\nexport const isLinearElement = (\n  element?: ExcalidrawElement | null,\n): element is ExcalidrawLinearElement => {\n  return (\n    element != null &&\n    (element.type === \"arrow\" ||\n      element.type === \"line\" ||\n      element.type === \"draw\")\n  );\n};\n\nexport const isExcalidrawElement = (element: any): boolean => {\n  return (\n    element?.type === \"text\" ||\n    element?.type === \"diamond\" ||\n    element?.type === \"rectangle\" ||\n    element?.type === \"ellipse\" ||\n    element?.type === \"arrow\" ||\n    element?.type === \"draw\" ||\n    element?.type === \"line\"\n  );\n};\n","import { Point } from \"./types\";\nimport { LINE_CONFIRM_THRESHOLD } from \"./constants\";\nimport { ExcalidrawLinearElement } from \"./element/types\";\n\n// https://stackoverflow.com/a/6853926/232122\nexport const distanceBetweenPointAndSegment = (\n  x: number,\n  y: number,\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n) => {\n  const A = x - x1;\n  const B = y - y1;\n  const C = x2 - x1;\n  const D = y2 - y1;\n\n  const dot = A * C + B * D;\n  const lenSquare = C * C + D * D;\n  let param = -1;\n  if (lenSquare !== 0) {\n    // in case of 0 length line\n    param = dot / lenSquare;\n  }\n\n  let xx, yy;\n  if (param < 0) {\n    xx = x1;\n    yy = y1;\n  } else if (param > 1) {\n    xx = x2;\n    yy = y2;\n  } else {\n    xx = x1 + param * C;\n    yy = y1 + param * D;\n  }\n\n  const dx = x - xx;\n  const dy = y - yy;\n  return Math.hypot(dx, dy);\n};\n\nexport const rotate = (\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  angle: number,\n): [number, number] =>\n  // 𝑎′𝑥=(𝑎𝑥−𝑐𝑥)cos𝜃−(𝑎𝑦−𝑐𝑦)sin𝜃+𝑐𝑥\n  // 𝑎′𝑦=(𝑎𝑥−𝑐𝑥)sin𝜃+(𝑎𝑦−𝑐𝑦)cos𝜃+𝑐𝑦.\n  // https://math.stackexchange.com/questions/2204520/how-do-i-rotate-a-line-segment-in-a-specific-point-on-the-line\n  [\n    (x1 - x2) * Math.cos(angle) - (y1 - y2) * Math.sin(angle) + x2,\n    (x1 - x2) * Math.sin(angle) + (y1 - y2) * Math.cos(angle) + y2,\n  ];\n\nexport const adjustXYWithRotation = (\n  side: \"n\" | \"s\" | \"w\" | \"e\" | \"nw\" | \"ne\" | \"sw\" | \"se\",\n  x: number,\n  y: number,\n  angle: number,\n  deltaX1: number,\n  deltaY1: number,\n  deltaX2: number,\n  deltaY2: number,\n  isResizeFromCenter: boolean,\n): [number, number] => {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  if (side === \"e\" || side === \"ne\" || side === \"se\") {\n    if (isResizeFromCenter) {\n      x += deltaX1 + deltaX2;\n    } else {\n      x += deltaX1 * (1 + cos);\n      y += deltaX1 * sin;\n      x += deltaX2 * (1 - cos);\n      y += deltaX2 * -sin;\n    }\n  }\n  if (side === \"s\" || side === \"sw\" || side === \"se\") {\n    if (isResizeFromCenter) {\n      y += deltaY1 + deltaY2;\n    } else {\n      x += deltaY1 * -sin;\n      y += deltaY1 * (1 + cos);\n      x += deltaY2 * sin;\n      y += deltaY2 * (1 - cos);\n    }\n  }\n  if (side === \"w\" || side === \"nw\" || side === \"sw\") {\n    if (isResizeFromCenter) {\n      x += deltaX1 + deltaX2;\n    } else {\n      x += deltaX1 * (1 - cos);\n      y += deltaX1 * -sin;\n      x += deltaX2 * (1 + cos);\n      y += deltaX2 * sin;\n    }\n  }\n  if (side === \"n\" || side === \"nw\" || side === \"ne\") {\n    if (isResizeFromCenter) {\n      y += deltaY1 + deltaY2;\n    } else {\n      x += deltaY1 * sin;\n      y += deltaY1 * (1 - cos);\n      x += deltaY2 * -sin;\n      y += deltaY2 * (1 + cos);\n    }\n  }\n  return [x, y];\n};\n\nexport const getFlipAdjustment = (\n  side: \"n\" | \"s\" | \"w\" | \"e\" | \"nw\" | \"ne\" | \"sw\" | \"se\",\n  nextWidth: number,\n  nextHeight: number,\n  nextX1: number,\n  nextY1: number,\n  nextX2: number,\n  nextY2: number,\n  finalX1: number,\n  finalY1: number,\n  finalX2: number,\n  finalY2: number,\n  needsRotation: boolean,\n  angle: number,\n): [number, number] => {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  let flipDiffX = 0;\n  let flipDiffY = 0;\n  if (nextWidth < 0) {\n    if (side === \"e\" || side === \"ne\" || side === \"se\") {\n      if (needsRotation) {\n        flipDiffX += (finalX2 - nextX1) * cos;\n        flipDiffY += (finalX2 - nextX1) * sin;\n      } else {\n        flipDiffX += finalX2 - nextX1;\n      }\n    }\n    if (side === \"w\" || side === \"nw\" || side === \"sw\") {\n      if (needsRotation) {\n        flipDiffX += (finalX1 - nextX2) * cos;\n        flipDiffY += (finalX1 - nextX2) * sin;\n      } else {\n        flipDiffX += finalX1 - nextX2;\n      }\n    }\n  }\n  if (nextHeight < 0) {\n    if (side === \"s\" || side === \"se\" || side === \"sw\") {\n      if (needsRotation) {\n        flipDiffY += (finalY2 - nextY1) * cos;\n        flipDiffX += (finalY2 - nextY1) * -sin;\n      } else {\n        flipDiffY += finalY2 - nextY1;\n      }\n    }\n    if (side === \"n\" || side === \"ne\" || side === \"nw\") {\n      if (needsRotation) {\n        flipDiffY += (finalY1 - nextY2) * cos;\n        flipDiffX += (finalY1 - nextY2) * -sin;\n      } else {\n        flipDiffY += finalY1 - nextY2;\n      }\n    }\n  }\n  return [flipDiffX, flipDiffY];\n};\n\nexport const getPointOnAPath = (point: Point, path: Point[]) => {\n  const [px, py] = point;\n  const [start, ...other] = path;\n  let [lastX, lastY] = start;\n  let kLine: number = 0;\n  let idx: number = 0;\n\n  // if any item in the array is true, it means that a point is\n  // on some segment of a line based path\n  const retVal = other.some(([x2, y2], i) => {\n    // we always take a line when dealing with line segments\n    const x1 = lastX;\n    const y1 = lastY;\n\n    lastX = x2;\n    lastY = y2;\n\n    // if a point is not within the domain of the line segment\n    // it is not on the line segment\n    if (px < x1 || px > x2) {\n      return false;\n    }\n\n    // check if all points lie on the same line\n    // y1 = kx1 + b, y2 = kx2 + b\n    // y2 - y1 = k(x2 - x2) -> k = (y2 - y1) / (x2 - x1)\n\n    // coefficient for the line (p0, p1)\n    const kL = (y2 - y1) / (x2 - x1);\n\n    // coefficient for the line segment (p0, point)\n    const kP1 = (py - y1) / (px - x1);\n\n    // coefficient for the line segment (point, p1)\n    const kP2 = (py - y2) / (px - x2);\n\n    // because we are basing both lines from the same starting point\n    // the only option for collinearity is having same coefficients\n\n    // using it for floating point comparisons\n    const epsilon = 0.3;\n\n    // if coefficient is more than an arbitrary epsilon,\n    // these lines are nor collinear\n    if (Math.abs(kP1 - kL) > epsilon && Math.abs(kP2 - kL) > epsilon) {\n      return false;\n    }\n\n    // store the coefficient because we are goint to need it\n    kLine = kL;\n    idx = i;\n\n    return true;\n  });\n\n  // Return a coordinate that is always on the line segment\n  if (retVal === true) {\n    return { x: point[0], y: kLine * point[0], segment: idx };\n  }\n\n  return null;\n};\n\nexport const distance2d = (x1: number, y1: number, x2: number, y2: number) => {\n  const xd = x2 - x1;\n  const yd = y2 - y1;\n  return Math.hypot(xd, yd);\n};\n\n// Checks if the first and last point are close enough\n// to be considered a loop\nexport const isPathALoop = (\n  points: ExcalidrawLinearElement[\"points\"],\n): boolean => {\n  if (points.length >= 3) {\n    const [firstPoint, lastPoint] = [points[0], points[points.length - 1]];\n    return (\n      distance2d(firstPoint[0], firstPoint[1], lastPoint[0], lastPoint[1]) <=\n      LINE_CONFIRM_THRESHOLD\n    );\n  }\n  return false;\n};\n\n// Draw a line from the point to the right till infiinty\n// Check how many lines of the polygon does this infinite line intersects with\n// If the number of intersections is odd, point is in the polygon\nexport const isPointInPolygon = (\n  points: Point[],\n  x: number,\n  y: number,\n): boolean => {\n  const vertices = points.length;\n\n  // There must be at least 3 vertices in polygon\n  if (vertices < 3) {\n    return false;\n  }\n  const extreme: Point = [Number.MAX_SAFE_INTEGER, y];\n  const p: Point = [x, y];\n  let count = 0;\n  for (let i = 0; i < vertices; i++) {\n    const current = points[i];\n    const next = points[(i + 1) % vertices];\n    if (doIntersect(current, next, p, extreme)) {\n      if (orientation(current, p, next) === 0) {\n        return onSegment(current, p, next);\n      }\n      count++;\n    }\n  }\n  // true if count is off\n  return count % 2 === 1;\n};\n\n// Check if q lies on the line segment pr\nconst onSegment = (p: Point, q: Point, r: Point) => {\n  return (\n    q[0] <= Math.max(p[0], r[0]) &&\n    q[0] >= Math.min(p[0], r[0]) &&\n    q[1] <= Math.max(p[1], r[1]) &&\n    q[1] >= Math.min(p[1], r[1])\n  );\n};\n\n// For the ordered points p, q, r, return\n// 0 if p, q, r are collinear\n// 1 if Clockwise\n// 2 if counterclickwise\nconst orientation = (p: Point, q: Point, r: Point) => {\n  const val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1]);\n  if (val === 0) {\n    return 0;\n  }\n  return val > 0 ? 1 : 2;\n};\n\n// Check is p1q1 intersects with p2q2\nconst doIntersect = (p1: Point, q1: Point, p2: Point, q2: Point) => {\n  const o1 = orientation(p1, q1, p2);\n  const o2 = orientation(p1, q1, q2);\n  const o3 = orientation(p2, q2, p1);\n  const o4 = orientation(p2, q2, q1);\n\n  if (o1 !== o2 && o3 !== o4) {\n    return true;\n  }\n\n  // p1, q1 and p2 are colinear and p2 lies on segment p1q1\n  if (o1 === 0 && onSegment(p1, p2, q1)) {\n    return true;\n  }\n\n  // p1, q1 and p2 are colinear and q2 lies on segment p1q1\n  if (o2 === 0 && onSegment(p1, q2, q1)) {\n    return true;\n  }\n\n  // p2, q2 and p1 are colinear and p1 lies on segment p2q2\n  if (o3 === 0 && onSegment(p2, p1, q2)) {\n    return true;\n  }\n\n  // p2, q2 and q1 are colinear and q1 lies on segment p2q2\n  if (o4 === 0 && onSegment(p2, q1, q2)) {\n    return true;\n  }\n\n  return false;\n};\n","import { ExcalidrawElement, ExcalidrawLinearElement } from \"./types\";\nimport { distance2d, rotate } from \"../math\";\nimport rough from \"roughjs/bin/rough\";\nimport { Drawable, Op } from \"roughjs/bin/core\";\nimport { Point } from \"../types\";\nimport {\n  getShapeForElement,\n  generateRoughOptions,\n} from \"../renderer/renderElement\";\nimport { isLinearElement } from \"./typeChecks\";\nimport { rescalePoints } from \"../points\";\n\n// If the element is created from right to left, the width is going to be negative\n// This set of functions retrieves the absolute position of the 4 points.\nexport const getElementAbsoluteCoords = (\n  element: ExcalidrawElement,\n): [number, number, number, number] => {\n  if (isLinearElement(element)) {\n    return getLinearElementAbsoluteCoords(element);\n  }\n  return [\n    element.x,\n    element.y,\n    element.x + element.width,\n    element.y + element.height,\n  ];\n};\n\nexport const getDiamondPoints = (element: ExcalidrawElement) => {\n  // Here we add +1 to avoid these numbers to be 0\n  // otherwise rough.js will throw an error complaining about it\n  const topX = Math.floor(element.width / 2) + 1;\n  const topY = 0;\n  const rightX = element.width;\n  const rightY = Math.floor(element.height / 2) + 1;\n  const bottomX = topX;\n  const bottomY = element.height;\n  const leftX = topY;\n  const leftY = rightY;\n\n  return [topX, topY, rightX, rightY, bottomX, bottomY, leftX, leftY];\n};\n\nexport const getCurvePathOps = (shape: Drawable): Op[] => {\n  for (const set of shape.sets) {\n    if (set.type === \"path\") {\n      return set.ops;\n    }\n  }\n  return shape.sets[0].ops;\n};\n\nconst getMinMaxXYFromCurvePathOps = (\n  ops: Op[],\n  transformXY?: (x: number, y: number) => [number, number],\n): [number, number, number, number] => {\n  let currentP: Point = [0, 0];\n  const { minX, minY, maxX, maxY } = ops.reduce(\n    (limits, { op, data }) => {\n      // There are only four operation types:\n      // move, bcurveTo, lineTo, and curveTo\n      if (op === \"move\") {\n        // change starting point\n        currentP = (data as unknown) as Point;\n        // move operation does not draw anything; so, it always\n        // returns false\n      } else if (op === \"bcurveTo\") {\n        // create points from bezier curve\n        // bezier curve stores data as a flattened array of three positions\n        // [x1, y1, x2, y2, x3, y3]\n        const p1 = [data[0], data[1]] as Point;\n        const p2 = [data[2], data[3]] as Point;\n        const p3 = [data[4], data[5]] as Point;\n\n        const p0 = currentP;\n        currentP = p3;\n\n        const equation = (t: number, idx: number) =>\n          Math.pow(1 - t, 3) * p3[idx] +\n          3 * t * Math.pow(1 - t, 2) * p2[idx] +\n          3 * Math.pow(t, 2) * (1 - t) * p1[idx] +\n          p0[idx] * Math.pow(t, 3);\n\n        let t = 0;\n        while (t <= 1.0) {\n          let x = equation(t, 0);\n          let y = equation(t, 1);\n          if (transformXY) {\n            [x, y] = transformXY(x, y);\n          }\n\n          limits.minY = Math.min(limits.minY, y);\n          limits.minX = Math.min(limits.minX, x);\n\n          limits.maxX = Math.max(limits.maxX, x);\n          limits.maxY = Math.max(limits.maxY, y);\n\n          t += 0.1;\n        }\n      } else if (op === \"lineTo\") {\n        // TODO: Implement this\n      } else if (op === \"qcurveTo\") {\n        // TODO: Implement this\n      }\n      return limits;\n    },\n    { minX: Infinity, minY: Infinity, maxX: -Infinity, maxY: -Infinity },\n  );\n\n  return [minX, minY, maxX, maxY];\n};\n\nconst getLinearElementAbsoluteCoords = (\n  element: ExcalidrawLinearElement,\n): [number, number, number, number] => {\n  if (element.points.length < 2 || !getShapeForElement(element)) {\n    // XXX this is just a poor estimate and not very useful\n    const { minX, minY, maxX, maxY } = element.points.reduce(\n      (limits, [x, y]) => {\n        limits.minY = Math.min(limits.minY, y);\n        limits.minX = Math.min(limits.minX, x);\n\n        limits.maxX = Math.max(limits.maxX, x);\n        limits.maxY = Math.max(limits.maxY, y);\n\n        return limits;\n      },\n      { minX: Infinity, minY: Infinity, maxX: -Infinity, maxY: -Infinity },\n    );\n    return [\n      minX + element.x,\n      minY + element.y,\n      maxX + element.x,\n      maxY + element.y,\n    ];\n  }\n\n  const shape = getShapeForElement(element) as Drawable[];\n\n  // first element is always the curve\n  const ops = getCurvePathOps(shape[0]);\n\n  const [minX, minY, maxX, maxY] = getMinMaxXYFromCurvePathOps(ops);\n\n  return [\n    minX + element.x,\n    minY + element.y,\n    maxX + element.x,\n    maxY + element.y,\n  ];\n};\n\nexport const getArrowPoints = (\n  element: ExcalidrawLinearElement,\n  shape: Drawable[],\n) => {\n  const ops = getCurvePathOps(shape[0]);\n\n  const data = ops[ops.length - 1].data;\n  const p3 = [data[4], data[5]] as Point;\n  const p2 = [data[2], data[3]] as Point;\n  const p1 = [data[0], data[1]] as Point;\n\n  // we need to find p0 of the bezier curve\n  // it is typically the last point of the previous\n  // curve; it can also be the position of moveTo operation\n  const prevOp = ops[ops.length - 2];\n  let p0: Point = [0, 0];\n  if (prevOp.op === \"move\") {\n    p0 = (prevOp.data as unknown) as Point;\n  } else if (prevOp.op === \"bcurveTo\") {\n    p0 = [prevOp.data[4], prevOp.data[5]];\n  }\n\n  // B(t) = p0 * (1-t)^3 + 3p1 * t * (1-t)^2 + 3p2 * t^2 * (1-t) + p3 * t^3\n  const equation = (t: number, idx: number) =>\n    Math.pow(1 - t, 3) * p3[idx] +\n    3 * t * Math.pow(1 - t, 2) * p2[idx] +\n    3 * Math.pow(t, 2) * (1 - t) * p1[idx] +\n    p0[idx] * Math.pow(t, 3);\n\n  // we know the last point of the arrow\n  const [x2, y2] = p3;\n\n  // by using cubic bezier equation (B(t)) and the given parameters,\n  // we calculate a point that is closer to the last point\n  // The value 0.3 is chosen arbitrarily and it works best for all\n  // the tested cases\n  const [x1, y1] = [equation(0.3, 0), equation(0.3, 1)];\n\n  // find the normalized direction vector based on the\n  // previously calculated points\n  const distance = Math.hypot(x2 - x1, y2 - y1);\n  const nx = (x2 - x1) / distance;\n  const ny = (y2 - y1) / distance;\n\n  const size = 30; // pixels\n  const arrowLength = element.points.reduce((total, [cx, cy], idx, points) => {\n    const [px, py] = idx > 0 ? points[idx - 1] : [0, 0];\n    return total + Math.hypot(cx - px, cy - py);\n  }, 0);\n\n  // Scale down the arrow until we hit a certain size so that it doesn't look weird\n  // This value is selected by minizing a minmum size with the whole length of the arrow\n  // intead of last segment of the arrow\n  const minSize = Math.min(size, arrowLength / 2);\n  const xs = x2 - nx * minSize;\n  const ys = y2 - ny * minSize;\n\n  const angle = 20; // degrees\n  const [x3, y3] = rotate(xs, ys, x2, y2, (-angle * Math.PI) / 180);\n  const [x4, y4] = rotate(xs, ys, x2, y2, (angle * Math.PI) / 180);\n\n  return [x2, y2, x3, y3, x4, y4];\n};\n\nconst getLinearElementRotatedBounds = (\n  element: ExcalidrawLinearElement,\n  cx: number,\n  cy: number,\n): [number, number, number, number] => {\n  if (element.points.length < 2 || !getShapeForElement(element)) {\n    // XXX this is just a poor estimate and not very useful\n    const { minX, minY, maxX, maxY } = element.points.reduce(\n      (limits, [x, y]) => {\n        [x, y] = rotate(element.x + x, element.y + y, cx, cy, element.angle);\n        limits.minY = Math.min(limits.minY, y);\n        limits.minX = Math.min(limits.minX, x);\n        limits.maxX = Math.max(limits.maxX, x);\n        limits.maxY = Math.max(limits.maxY, y);\n        return limits;\n      },\n      { minX: Infinity, minY: Infinity, maxX: -Infinity, maxY: -Infinity },\n    );\n    return [minX, minY, maxX, maxY];\n  }\n\n  const shape = getShapeForElement(element) as Drawable[];\n\n  // first element is always the curve\n  const ops = getCurvePathOps(shape[0]);\n\n  const transformXY = (x: number, y: number) =>\n    rotate(element.x + x, element.y + y, cx, cy, element.angle);\n  return getMinMaxXYFromCurvePathOps(ops, transformXY);\n};\n\nexport const getElementBounds = (\n  element: ExcalidrawElement,\n): [number, number, number, number] => {\n  const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n  const cx = (x1 + x2) / 2;\n  const cy = (y1 + y2) / 2;\n  if (isLinearElement(element)) {\n    return getLinearElementRotatedBounds(element, cx, cy);\n  }\n  if (element.type === \"diamond\") {\n    const [x11, y11] = rotate(cx, y1, cx, cy, element.angle);\n    const [x12, y12] = rotate(cx, y2, cx, cy, element.angle);\n    const [x22, y22] = rotate(x1, cy, cx, cy, element.angle);\n    const [x21, y21] = rotate(x2, cy, cx, cy, element.angle);\n    const minX = Math.min(x11, x12, x22, x21);\n    const minY = Math.min(y11, y12, y22, y21);\n    const maxX = Math.max(x11, x12, x22, x21);\n    const maxY = Math.max(y11, y12, y22, y21);\n    return [minX, minY, maxX, maxY];\n  }\n  if (element.type === \"ellipse\") {\n    const w = (x2 - x1) / 2;\n    const h = (y2 - y1) / 2;\n    const cos = Math.cos(element.angle);\n    const sin = Math.sin(element.angle);\n    const ww = Math.hypot(w * cos, h * sin);\n    const hh = Math.hypot(h * cos, w * sin);\n    return [cx - ww, cy - hh, cx + ww, cy + hh];\n  }\n  const [x11, y11] = rotate(x1, y1, cx, cy, element.angle);\n  const [x12, y12] = rotate(x1, y2, cx, cy, element.angle);\n  const [x22, y22] = rotate(x2, y2, cx, cy, element.angle);\n  const [x21, y21] = rotate(x2, y1, cx, cy, element.angle);\n  const minX = Math.min(x11, x12, x22, x21);\n  const minY = Math.min(y11, y12, y22, y21);\n  const maxX = Math.max(x11, x12, x22, x21);\n  const maxY = Math.max(y11, y12, y22, y21);\n  return [minX, minY, maxX, maxY];\n};\n\nexport const getCommonBounds = (\n  elements: readonly ExcalidrawElement[],\n): [number, number, number, number] => {\n  if (!elements.length) {\n    return [0, 0, 0, 0];\n  }\n\n  let minX = Infinity;\n  let maxX = -Infinity;\n  let minY = Infinity;\n  let maxY = -Infinity;\n\n  elements.forEach((element) => {\n    const [x1, y1, x2, y2] = getElementBounds(element);\n    minX = Math.min(minX, x1);\n    minY = Math.min(minY, y1);\n    maxX = Math.max(maxX, x2);\n    maxY = Math.max(maxY, y2);\n  });\n\n  return [minX, minY, maxX, maxY];\n};\n\nexport const getResizedElementAbsoluteCoords = (\n  element: ExcalidrawElement,\n  nextWidth: number,\n  nextHeight: number,\n): [number, number, number, number] => {\n  if (!isLinearElement(element)) {\n    return [\n      element.x,\n      element.y,\n      element.x + nextWidth,\n      element.y + nextHeight,\n    ];\n  }\n\n  const points = rescalePoints(\n    0,\n    nextWidth,\n    rescalePoints(1, nextHeight, element.points),\n  );\n\n  const gen = rough.generator();\n  const curve = gen.curve(\n    points as [number, number][],\n    generateRoughOptions(element),\n  );\n  const ops = getCurvePathOps(curve);\n  const [minX, minY, maxX, maxY] = getMinMaxXYFromCurvePathOps(ops);\n  return [\n    minX + element.x,\n    minY + element.y,\n    maxX + element.x,\n    maxY + element.y,\n  ];\n};\n\nexport const getElementPointsCoords = (\n  element: ExcalidrawLinearElement,\n  points: readonly (readonly [number, number])[],\n): [number, number, number, number] => {\n  // This might be computationally heavey\n  const gen = rough.generator();\n  const curve = gen.curve(\n    points as [number, number][],\n    generateRoughOptions(element),\n  );\n  const ops = getCurvePathOps(curve);\n  const [minX, minY, maxX, maxY] = getMinMaxXYFromCurvePathOps(ops);\n  return [\n    minX + element.x,\n    minY + element.y,\n    maxX + element.x,\n    maxY + element.y,\n  ];\n};\n\nexport const getClosestElementBounds = (\n  elements: readonly ExcalidrawElement[],\n  from: { x: number; y: number },\n): [number, number, number, number] => {\n  if (!elements.length) {\n    return [0, 0, 0, 0];\n  }\n\n  let minDistance = Infinity;\n  let closestElement = elements[0];\n\n  elements.forEach((element) => {\n    const [x1, y1, x2, y2] = getElementBounds(element);\n    const distance = distance2d((x1 + x2) / 2, (y1 + y2) / 2, from.x, from.y);\n\n    if (distance < minDistance) {\n      minDistance = distance;\n      closestElement = element;\n    }\n  });\n\n  return getElementBounds(closestElement);\n};\n","import {\n  ExcalidrawElement,\n  ExcalidrawTextElement,\n  NonDeletedExcalidrawElement,\n} from \"../element/types\";\nimport { isTextElement, isLinearElement } from \"../element/typeChecks\";\nimport {\n  getDiamondPoints,\n  getArrowPoints,\n  getElementAbsoluteCoords,\n} from \"../element/bounds\";\nimport { RoughCanvas } from \"roughjs/bin/canvas\";\nimport { Drawable, Options } from \"roughjs/bin/core\";\nimport { RoughSVG } from \"roughjs/bin/svg\";\nimport { RoughGenerator } from \"roughjs/bin/generator\";\nimport { SceneState } from \"../scene/types\";\nimport { SVG_NS, distance, getFontString, getFontFamilyString } from \"../utils\";\nimport { isPathALoop } from \"../math\";\nimport rough from \"roughjs/bin/rough\";\n\nconst CANVAS_PADDING = 20;\n\nconst DASHARRAY_DASHED = [12, 8];\nconst DASHARRAY_DOTTED = [3, 6];\n\nexport interface ExcalidrawElementWithCanvas {\n  element: ExcalidrawElement | ExcalidrawTextElement;\n  canvas: HTMLCanvasElement;\n  canvasZoom: number;\n  canvasOffsetX: number;\n  canvasOffsetY: number;\n}\n\nconst generateElementCanvas = (\n  element: NonDeletedExcalidrawElement,\n  zoom: number,\n): ExcalidrawElementWithCanvas => {\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\")!;\n\n  let canvasOffsetX = 0;\n  let canvasOffsetY = 0;\n\n  if (isLinearElement(element)) {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n    canvas.width =\n      distance(x1, x2) * window.devicePixelRatio * zoom + CANVAS_PADDING * 2;\n    canvas.height =\n      distance(y1, y2) * window.devicePixelRatio * zoom + CANVAS_PADDING * 2;\n\n    canvasOffsetX =\n      element.x > x1\n        ? Math.floor(distance(element.x, x1)) * window.devicePixelRatio\n        : 0;\n    canvasOffsetY =\n      element.y > y1\n        ? Math.floor(distance(element.y, y1)) * window.devicePixelRatio\n        : 0;\n    context.translate(canvasOffsetX * zoom, canvasOffsetY * zoom);\n  } else {\n    canvas.width =\n      element.width * window.devicePixelRatio * zoom + CANVAS_PADDING * 2;\n    canvas.height =\n      element.height * window.devicePixelRatio * zoom + CANVAS_PADDING * 2;\n  }\n\n  context.translate(CANVAS_PADDING, CANVAS_PADDING);\n  context.scale(window.devicePixelRatio * zoom, window.devicePixelRatio * zoom);\n\n  const rc = rough.canvas(canvas);\n  drawElementOnCanvas(element, rc, context);\n  context.translate(-CANVAS_PADDING, -CANVAS_PADDING);\n  context.scale(\n    1 / (window.devicePixelRatio * zoom),\n    1 / (window.devicePixelRatio * zoom),\n  );\n  return { element, canvas, canvasZoom: zoom, canvasOffsetX, canvasOffsetY };\n};\n\nconst drawElementOnCanvas = (\n  element: NonDeletedExcalidrawElement,\n  rc: RoughCanvas,\n  context: CanvasRenderingContext2D,\n) => {\n  context.globalAlpha = element.opacity / 100;\n  switch (element.type) {\n    case \"rectangle\":\n    case \"diamond\":\n    case \"ellipse\": {\n      rc.draw(getShapeForElement(element) as Drawable);\n      break;\n    }\n    case \"arrow\":\n    case \"draw\":\n    case \"line\": {\n      (getShapeForElement(element) as Drawable[]).forEach((shape) => {\n        rc.draw(shape);\n      });\n      break;\n    }\n    default: {\n      if (isTextElement(element)) {\n        const font = context.font;\n        context.font = getFontString(element);\n        const fillStyle = context.fillStyle;\n        context.fillStyle = element.strokeColor;\n        const textAlign = context.textAlign;\n        context.textAlign = element.textAlign as CanvasTextAlign;\n        // Canvas does not support multiline text by default\n        const lines = element.text.replace(/\\r\\n?/g, \"\\n\").split(\"\\n\");\n        const lineHeight = element.height / lines.length;\n        const verticalOffset = element.height - element.baseline;\n        const horizontalOffset =\n          element.textAlign === \"center\"\n            ? element.width / 2\n            : element.textAlign === \"right\"\n            ? element.width\n            : 0;\n        for (let i = 0; i < lines.length; i++) {\n          context.fillText(\n            lines[i],\n            0 + horizontalOffset,\n            (i + 1) * lineHeight - verticalOffset,\n          );\n        }\n        context.fillStyle = fillStyle;\n        context.font = font;\n        context.textAlign = textAlign;\n      } else {\n        throw new Error(`Unimplemented type ${element.type}`);\n      }\n    }\n  }\n  context.globalAlpha = 1;\n};\n\nconst elementWithCanvasCache = new WeakMap<\n  ExcalidrawElement,\n  ExcalidrawElementWithCanvas\n>();\n\nconst shapeCache = new WeakMap<\n  ExcalidrawElement,\n  Drawable | Drawable[] | null\n>();\n\nexport const getShapeForElement = (element: ExcalidrawElement) =>\n  shapeCache.get(element);\n\nexport const invalidateShapeForElement = (element: ExcalidrawElement) =>\n  shapeCache.delete(element);\n\nexport const generateRoughOptions = (element: ExcalidrawElement): Options => {\n  const options: Options = {\n    seed: element.seed,\n    strokeLineDash:\n      element.strokeStyle === \"dashed\"\n        ? DASHARRAY_DASHED\n        : element.strokeStyle === \"dotted\"\n        ? DASHARRAY_DOTTED\n        : undefined,\n    // for non-solid strokes, disable multiStroke because it tends to make\n    //  dashes/dots overlay each other\n    disableMultiStroke: element.strokeStyle !== \"solid\",\n    // for non-solid strokes, increase the width a bit to make it visually\n    //  similar to solid strokes, because we're also disabling multiStroke\n    strokeWidth:\n      element.strokeStyle !== \"solid\"\n        ? element.strokeWidth + 0.5\n        : element.strokeWidth,\n    // when increasing strokeWidth, we must explicitly set fillWeight and\n    //  hachureGap because if not specified, roughjs uses strokeWidth to\n    //  calculate them (and we don't want the fills to be modified)\n    fillWeight: element.strokeWidth / 2,\n    hachureGap: element.strokeWidth * 4,\n    roughness: element.roughness,\n    stroke: element.strokeColor,\n  };\n\n  switch (element.type) {\n    case \"rectangle\":\n    case \"diamond\":\n    case \"ellipse\": {\n      options.fillStyle = element.fillStyle;\n      options.fill =\n        element.backgroundColor === \"transparent\"\n          ? undefined\n          : element.backgroundColor;\n      if (element.type === \"ellipse\") {\n        options.curveFitting = 1;\n      }\n      return options;\n    }\n    case \"line\":\n    case \"draw\": {\n      // If shape is a line and is a closed shape,\n      // fill the shape if a color is set.\n      if (isPathALoop(element.points)) {\n        options.fillStyle = element.fillStyle;\n        options.fill =\n          element.backgroundColor === \"transparent\"\n            ? undefined\n            : element.backgroundColor;\n      }\n      return options;\n    }\n    case \"arrow\":\n      return options;\n    default: {\n      throw new Error(`Unimplemented type ${element.type}`);\n    }\n  }\n};\n\nconst generateElement = (\n  element: NonDeletedExcalidrawElement,\n  generator: RoughGenerator,\n  sceneState?: SceneState,\n) => {\n  let shape = shapeCache.get(element) || null;\n  if (!shape) {\n    elementWithCanvasCache.delete(element);\n\n    switch (element.type) {\n      case \"rectangle\":\n        shape = generator.rectangle(\n          0,\n          0,\n          element.width,\n          element.height,\n          generateRoughOptions(element),\n        );\n\n        break;\n      case \"diamond\": {\n        const [\n          topX,\n          topY,\n          rightX,\n          rightY,\n          bottomX,\n          bottomY,\n          leftX,\n          leftY,\n        ] = getDiamondPoints(element);\n        shape = generator.polygon(\n          [\n            [topX, topY],\n            [rightX, rightY],\n            [bottomX, bottomY],\n            [leftX, leftY],\n          ],\n          generateRoughOptions(element),\n        );\n        break;\n      }\n      case \"ellipse\":\n        shape = generator.ellipse(\n          element.width / 2,\n          element.height / 2,\n          element.width,\n          element.height,\n          generateRoughOptions(element),\n        );\n        break;\n      case \"line\":\n      case \"draw\":\n      case \"arrow\": {\n        const options = generateRoughOptions(element);\n\n        // points array can be empty in the beginning, so it is important to add\n        // initial position to it\n        const points = element.points.length ? element.points : [[0, 0]];\n\n        // curve is always the first element\n        // this simplifies finding the curve for an element\n        shape = [generator.curve(points as [number, number][], options)];\n\n        // add lines only in arrow\n        if (element.type === \"arrow\") {\n          const [x2, y2, x3, y3, x4, y4] = getArrowPoints(element, shape);\n          // for dotted arrows caps, reduce gap to make it more legible\n          if (element.strokeStyle === \"dotted\") {\n            options.strokeLineDash = [3, 4];\n            // for solid/dashed, keep solid arrow cap\n          } else {\n            delete options.strokeLineDash;\n          }\n          shape.push(\n            ...[\n              generator.line(x3, y3, x2, y2, options),\n              generator.line(x4, y4, x2, y2, options),\n            ],\n          );\n        }\n        break;\n      }\n      case \"text\": {\n        // just to ensure we don't regenerate element.canvas on rerenders\n        shape = [];\n        break;\n      }\n    }\n    shapeCache.set(element, shape);\n  }\n  const zoom = sceneState ? sceneState.zoom : 1;\n  const prevElementWithCanvas = elementWithCanvasCache.get(element);\n  const shouldRegenerateBecauseZoom =\n    prevElementWithCanvas &&\n    prevElementWithCanvas.canvasZoom !== zoom &&\n    !sceneState?.shouldCacheIgnoreZoom;\n  if (!prevElementWithCanvas || shouldRegenerateBecauseZoom) {\n    const elementWithCanvas = generateElementCanvas(element, zoom);\n    elementWithCanvasCache.set(element, elementWithCanvas);\n    return elementWithCanvas;\n  }\n  return prevElementWithCanvas;\n};\n\nconst drawElementFromCanvas = (\n  elementWithCanvas: ExcalidrawElementWithCanvas,\n  rc: RoughCanvas,\n  context: CanvasRenderingContext2D,\n  sceneState: SceneState,\n) => {\n  const element = elementWithCanvas.element;\n  const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n  const cx = ((x1 + x2) / 2 + sceneState.scrollX) * window.devicePixelRatio;\n  const cy = ((y1 + y2) / 2 + sceneState.scrollY) * window.devicePixelRatio;\n  context.scale(1 / window.devicePixelRatio, 1 / window.devicePixelRatio);\n  context.translate(cx, cy);\n  context.rotate(element.angle);\n  context.drawImage(\n    elementWithCanvas.canvas!,\n    (-(x2 - x1) / 2) * window.devicePixelRatio -\n      CANVAS_PADDING / elementWithCanvas.canvasZoom,\n    (-(y2 - y1) / 2) * window.devicePixelRatio -\n      CANVAS_PADDING / elementWithCanvas.canvasZoom,\n    elementWithCanvas.canvas!.width / elementWithCanvas.canvasZoom,\n    elementWithCanvas.canvas!.height / elementWithCanvas.canvasZoom,\n  );\n  context.rotate(-element.angle);\n  context.translate(-cx, -cy);\n  context.scale(window.devicePixelRatio, window.devicePixelRatio);\n};\n\nexport const renderElement = (\n  element: NonDeletedExcalidrawElement,\n  rc: RoughCanvas,\n  context: CanvasRenderingContext2D,\n  renderOptimizations: boolean,\n  sceneState: SceneState,\n) => {\n  const generator = rc.generator;\n  switch (element.type) {\n    case \"selection\": {\n      context.translate(\n        element.x + sceneState.scrollX,\n        element.y + sceneState.scrollY,\n      );\n      const fillStyle = context.fillStyle;\n      context.fillStyle = \"rgba(0, 0, 255, 0.10)\";\n      context.fillRect(0, 0, element.width, element.height);\n      context.fillStyle = fillStyle;\n      context.translate(\n        -element.x - sceneState.scrollX,\n        -element.y - sceneState.scrollY,\n      );\n      break;\n    }\n    case \"rectangle\":\n    case \"diamond\":\n    case \"ellipse\":\n    case \"line\":\n    case \"draw\":\n    case \"arrow\":\n    case \"text\": {\n      const elementWithCanvas = generateElement(element, generator, sceneState);\n\n      if (renderOptimizations) {\n        drawElementFromCanvas(elementWithCanvas, rc, context, sceneState);\n      } else {\n        const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n        const cx = (x1 + x2) / 2 + sceneState.scrollX;\n        const cy = (y1 + y2) / 2 + sceneState.scrollY;\n        const shiftX = (x2 - x1) / 2 - (element.x - x1);\n        const shiftY = (y2 - y1) / 2 - (element.y - y1);\n        context.translate(cx, cy);\n        context.rotate(element.angle);\n        context.translate(-shiftX, -shiftY);\n        drawElementOnCanvas(element, rc, context);\n        context.translate(shiftX, shiftY);\n        context.rotate(-element.angle);\n        context.translate(-cx, -cy);\n      }\n      break;\n    }\n    default: {\n      // @ts-ignore\n      throw new Error(`Unimplemented type ${element.type}`);\n    }\n  }\n};\n\nexport const renderElementToSvg = (\n  element: NonDeletedExcalidrawElement,\n  rsvg: RoughSVG,\n  svgRoot: SVGElement,\n  offsetX?: number,\n  offsetY?: number,\n) => {\n  const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n  const cx = (x2 - x1) / 2 - (element.x - x1);\n  const cy = (y2 - y1) / 2 - (element.y - y1);\n  const degree = (180 * element.angle) / Math.PI;\n  const generator = rsvg.generator;\n  switch (element.type) {\n    case \"selection\": {\n      // Since this is used only during editing experience, which is canvas based,\n      // this should not happen\n      throw new Error(\"Selection rendering is not supported for SVG\");\n    }\n    case \"rectangle\":\n    case \"diamond\":\n    case \"ellipse\": {\n      generateElement(element, generator);\n      const node = rsvg.draw(getShapeForElement(element) as Drawable);\n      const opacity = element.opacity / 100;\n      if (opacity !== 1) {\n        node.setAttribute(\"stroke-opacity\", `${opacity}`);\n        node.setAttribute(\"fill-opacity\", `${opacity}`);\n      }\n      node.setAttribute(\n        \"transform\",\n        `translate(${offsetX || 0} ${\n          offsetY || 0\n        }) rotate(${degree} ${cx} ${cy})`,\n      );\n      svgRoot.appendChild(node);\n      break;\n    }\n    case \"line\":\n    case \"draw\":\n    case \"arrow\": {\n      generateElement(element, generator);\n      const group = svgRoot.ownerDocument!.createElementNS(SVG_NS, \"g\");\n      const opacity = element.opacity / 100;\n      (getShapeForElement(element) as Drawable[]).forEach((shape) => {\n        const node = rsvg.draw(shape);\n        if (opacity !== 1) {\n          node.setAttribute(\"stroke-opacity\", `${opacity}`);\n          node.setAttribute(\"fill-opacity\", `${opacity}`);\n        }\n        node.setAttribute(\n          \"transform\",\n          `translate(${offsetX || 0} ${\n            offsetY || 0\n          }) rotate(${degree} ${cx} ${cy})`,\n        );\n        if (\n          (element.type === \"line\" || element.type === \"draw\") &&\n          isPathALoop(element.points) &&\n          element.backgroundColor !== \"transparent\"\n        ) {\n          node.setAttribute(\"fill-rule\", \"evenodd\");\n        }\n        group.appendChild(node);\n      });\n      svgRoot.appendChild(group);\n      break;\n    }\n    default: {\n      if (isTextElement(element)) {\n        const opacity = element.opacity / 100;\n        const node = svgRoot.ownerDocument!.createElementNS(SVG_NS, \"g\");\n        if (opacity !== 1) {\n          node.setAttribute(\"stroke-opacity\", `${opacity}`);\n          node.setAttribute(\"fill-opacity\", `${opacity}`);\n        }\n        node.setAttribute(\n          \"transform\",\n          `translate(${offsetX || 0} ${\n            offsetY || 0\n          }) rotate(${degree} ${cx} ${cy})`,\n        );\n        const lines = element.text.replace(/\\r\\n?/g, \"\\n\").split(\"\\n\");\n        const lineHeight = element.height / lines.length;\n        const verticalOffset = element.height - element.baseline;\n        const horizontalOffset =\n          element.textAlign === \"center\"\n            ? element.width / 2\n            : element.textAlign === \"right\"\n            ? element.width\n            : 0;\n        const textAnchor =\n          element.textAlign === \"center\"\n            ? \"middle\"\n            : element.textAlign === \"right\"\n            ? \"end\"\n            : \"start\";\n        for (let i = 0; i < lines.length; i++) {\n          const text = svgRoot.ownerDocument!.createElementNS(SVG_NS, \"text\");\n          text.textContent = lines[i];\n          text.setAttribute(\"x\", `${horizontalOffset}`);\n          text.setAttribute(\"y\", `${(i + 1) * lineHeight - verticalOffset}`);\n          text.setAttribute(\"font-family\", getFontFamilyString(element));\n          text.setAttribute(\"font-size\", `${element.fontSize}px`);\n          text.setAttribute(\"fill\", element.strokeColor);\n          text.setAttribute(\"text-anchor\", textAnchor);\n          text.setAttribute(\"style\", \"white-space: pre;\");\n          node.appendChild(text);\n        }\n        svgRoot.appendChild(node);\n      } else {\n        // @ts-ignore\n        throw new Error(`Unimplemented type ${element.type}`);\n      }\n    }\n  }\n};\n","import { Random } from \"roughjs/bin/math\";\nimport nanoid from \"nanoid\";\n\nlet random = new Random(Date.now());\nlet testIdBase = 0;\n\nexport const randomInteger = () => Math.floor(random.next() * 2 ** 31);\n\nexport const reseed = (seed: number) => {\n  random = new Random(seed);\n  testIdBase = 0;\n};\n\nexport const randomId = () =>\n  process.env.NODE_ENV === \"test\" ? `id${testIdBase++}` : nanoid();\n","import { ExcalidrawElement } from \"./types\";\nimport { invalidateShapeForElement } from \"../renderer/renderElement\";\nimport { globalSceneState } from \"../scene\";\nimport { getSizeFromPoints } from \"../points\";\nimport { randomInteger } from \"../random\";\nimport { Point } from \"../types\";\n\ntype ElementUpdate<TElement extends ExcalidrawElement> = Omit<\n  Partial<TElement>,\n  \"id\" | \"seed\" | \"version\" | \"versionNonce\"\n>;\n\n// This function tracks updates of text elements for the purposes for collaboration.\n// The version is used to compare updates when more than one user is working in\n// the same drawing. Note: this will trigger the component to update. Make sure you\n// are calling it either from a React event handler or within unstable_batchedUpdates().\nexport const mutateElement = <TElement extends Mutable<ExcalidrawElement>>(\n  element: TElement,\n  updates: ElementUpdate<TElement>,\n) => {\n  let didChange = false;\n\n  // casting to any because can't use `in` operator\n  // (see https://github.com/microsoft/TypeScript/issues/21732)\n  const { points } = updates as any;\n\n  if (typeof points !== \"undefined\") {\n    updates = { ...getSizeFromPoints(points), ...updates };\n  }\n\n  for (const key in updates) {\n    const value = (updates as any)[key];\n    if (typeof value !== \"undefined\") {\n      if (\n        (element as any)[key] === value &&\n        // if object, always update in case its deep prop was mutated\n        (typeof value !== \"object\" || value === null || key === \"groupIds\")\n      ) {\n        continue;\n      }\n\n      if (key === \"points\") {\n        const prevPoints = (element as any)[key];\n        const nextPoints = value;\n        if (prevPoints.length === nextPoints.length) {\n          let didChangePoints = false;\n          let i = prevPoints.length;\n          while (--i) {\n            const prevPoint: Point = prevPoints[i];\n            const nextPoint: Point = nextPoints[i];\n            if (\n              prevPoint[0] !== nextPoint[0] ||\n              prevPoint[1] !== nextPoint[1]\n            ) {\n              didChangePoints = true;\n              break;\n            }\n          }\n          if (!didChangePoints) {\n            continue;\n          }\n        }\n      }\n\n      (element as any)[key] = value;\n      didChange = true;\n    }\n  }\n\n  if (!didChange) {\n    return;\n  }\n\n  if (\n    typeof updates.height !== \"undefined\" ||\n    typeof updates.width !== \"undefined\" ||\n    typeof points !== \"undefined\"\n  ) {\n    invalidateShapeForElement(element);\n  }\n\n  element.version++;\n  element.versionNonce = randomInteger();\n\n  globalSceneState.informMutation();\n};\n\nexport const newElementWith = <TElement extends ExcalidrawElement>(\n  element: TElement,\n  updates: ElementUpdate<TElement>,\n): TElement => ({\n  ...element,\n  ...updates,\n  version: element.version + 1,\n  versionNonce: randomInteger(),\n});\n","import { Point } from \"./types\";\n\nexport const getSizeFromPoints = (points: readonly Point[]) => {\n  const xs = points.map((point) => point[0]);\n  const ys = points.map((point) => point[1]);\n  return {\n    width: Math.max(...xs) - Math.min(...xs),\n    height: Math.max(...ys) - Math.min(...ys),\n  };\n};\nexport const rescalePoints = (\n  dimension: 0 | 1,\n  nextDimensionSize: number,\n  prevPoints: readonly Point[],\n): Point[] => {\n  const prevDimValues = prevPoints.map((point) => point[dimension]);\n  const prevMaxDimension = Math.max(...prevDimValues);\n  const prevMinDimension = Math.min(...prevDimValues);\n  const prevDimensionSize = prevMaxDimension - prevMinDimension;\n\n  const dimensionScaleFactor =\n    prevDimensionSize === 0 ? 1 : nextDimensionSize / prevDimensionSize;\n\n  let nextMinDimension = Infinity;\n\n  const scaledPoints = prevPoints.map(\n    (prevPoint) =>\n      prevPoint.map((value, currentDimension) => {\n        if (currentDimension !== dimension) {\n          return value;\n        }\n        const scaledValue = value * dimensionScaleFactor;\n        nextMinDimension = Math.min(scaledValue, nextMinDimension);\n        return scaledValue;\n      }) as [number, number],\n  );\n\n  if (scaledPoints.length === 2) {\n    // we don't tranlate two-point lines\n    return scaledPoints;\n  }\n\n  const translation = prevMinDimension - nextMinDimension;\n\n  const nextPoints = scaledPoints.map(\n    (scaledPoint) =>\n      scaledPoint.map((value, currentDimension) => {\n        return currentDimension === dimension ? value + translation : value;\n      }) as [number, number],\n  );\n\n  return nextPoints;\n};\n","import { ExcalidrawElement } from \"./types\";\nimport { mutateElement } from \"./mutateElement\";\nimport { isLinearElement } from \"./typeChecks\";\nimport { SHIFT_LOCKING_ANGLE } from \"../constants\";\n\nexport const isInvisiblySmallElement = (\n  element: ExcalidrawElement,\n): boolean => {\n  if (isLinearElement(element)) {\n    return element.points.length < 2;\n  }\n  return element.width === 0 && element.height === 0;\n};\n\n/**\n * Makes a perfect shape or diagonal/horizontal/vertical line\n */\nexport const getPerfectElementSize = (\n  elementType: string,\n  width: number,\n  height: number,\n): { width: number; height: number } => {\n  const absWidth = Math.abs(width);\n  const absHeight = Math.abs(height);\n\n  if (\n    elementType === \"line\" ||\n    elementType === \"arrow\" ||\n    elementType === \"draw\"\n  ) {\n    const lockedAngle =\n      Math.round(Math.atan(absHeight / absWidth) / SHIFT_LOCKING_ANGLE) *\n      SHIFT_LOCKING_ANGLE;\n    if (lockedAngle === 0) {\n      height = 0;\n    } else if (lockedAngle === Math.PI / 2) {\n      width = 0;\n    } else {\n      height =\n        Math.round(absWidth * Math.tan(lockedAngle)) * Math.sign(height) ||\n        height;\n    }\n  } else if (elementType !== \"selection\") {\n    height = absWidth * Math.sign(height);\n  }\n  return { width, height };\n};\n\nexport const resizePerfectLineForNWHandler = (\n  element: ExcalidrawElement,\n  x: number,\n  y: number,\n) => {\n  const anchorX = element.x + element.width;\n  const anchorY = element.y + element.height;\n  const distanceToAnchorX = x - anchorX;\n  const distanceToAnchorY = y - anchorY;\n  if (Math.abs(distanceToAnchorX) < Math.abs(distanceToAnchorY) / 2) {\n    mutateElement(element, {\n      x: anchorX,\n      width: 0,\n      y,\n      height: -distanceToAnchorY,\n    });\n  } else if (Math.abs(distanceToAnchorY) < Math.abs(element.width) / 2) {\n    mutateElement(element, {\n      y: anchorY,\n      height: 0,\n    });\n  } else {\n    const nextHeight =\n      Math.sign(distanceToAnchorY) *\n      Math.sign(distanceToAnchorX) *\n      element.width;\n    mutateElement(element, {\n      x,\n      y: anchorY - nextHeight,\n      width: -distanceToAnchorX,\n      height: nextHeight,\n    });\n  }\n};\n\nexport const getNormalizedDimensions = (\n  element: Pick<ExcalidrawElement, \"width\" | \"height\" | \"x\" | \"y\">,\n): {\n  width: ExcalidrawElement[\"width\"];\n  height: ExcalidrawElement[\"height\"];\n  x: ExcalidrawElement[\"x\"];\n  y: ExcalidrawElement[\"y\"];\n} => {\n  const ret = {\n    width: element.width,\n    height: element.height,\n    x: element.x,\n    y: element.y,\n  };\n\n  if (element.width < 0) {\n    const nextWidth = Math.abs(element.width);\n    ret.width = nextWidth;\n    ret.x = element.x - nextWidth;\n  }\n\n  if (element.height < 0) {\n    const nextHeight = Math.abs(element.height);\n    ret.height = nextHeight;\n    ret.y = element.y - nextHeight;\n  }\n\n  return ret;\n};\n","import {\n  ExcalidrawElement,\n  ExcalidrawTextElement,\n  ExcalidrawLinearElement,\n  ExcalidrawGenericElement,\n  NonDeleted,\n  TextAlign,\n  FontFamily,\n  GroupId,\n} from \"../element/types\";\nimport { measureText, getFontString } from \"../utils\";\nimport { randomInteger, randomId } from \"../random\";\nimport { newElementWith } from \"./mutateElement\";\nimport { getNewGroupIdsForDuplication } from \"../groups\";\nimport { AppState } from \"../types\";\n\ntype ElementConstructorOpts = {\n  x: ExcalidrawGenericElement[\"x\"];\n  y: ExcalidrawGenericElement[\"y\"];\n  strokeColor: ExcalidrawGenericElement[\"strokeColor\"];\n  backgroundColor: ExcalidrawGenericElement[\"backgroundColor\"];\n  fillStyle: ExcalidrawGenericElement[\"fillStyle\"];\n  strokeWidth: ExcalidrawGenericElement[\"strokeWidth\"];\n  strokeStyle: ExcalidrawGenericElement[\"strokeStyle\"];\n  roughness: ExcalidrawGenericElement[\"roughness\"];\n  opacity: ExcalidrawGenericElement[\"opacity\"];\n  width?: ExcalidrawGenericElement[\"width\"];\n  height?: ExcalidrawGenericElement[\"height\"];\n  angle?: ExcalidrawGenericElement[\"angle\"];\n};\n\nconst _newElementBase = <T extends ExcalidrawElement>(\n  type: T[\"type\"],\n  {\n    x,\n    y,\n    strokeColor,\n    backgroundColor,\n    fillStyle,\n    strokeWidth,\n    strokeStyle,\n    roughness,\n    opacity,\n    width = 0,\n    height = 0,\n    angle = 0,\n    ...rest\n  }: ElementConstructorOpts & Omit<Partial<ExcalidrawGenericElement>, \"type\">,\n) => ({\n  id: rest.id || randomId(),\n  type,\n  x,\n  y,\n  width,\n  height,\n  angle,\n  strokeColor,\n  backgroundColor,\n  fillStyle,\n  strokeWidth,\n  strokeStyle,\n  roughness,\n  opacity,\n  seed: rest.seed ?? randomInteger(),\n  version: rest.version || 1,\n  versionNonce: rest.versionNonce ?? 0,\n  isDeleted: false as false,\n  groupIds: [],\n});\n\nexport const newElement = (\n  opts: {\n    type: ExcalidrawGenericElement[\"type\"];\n  } & ElementConstructorOpts,\n): NonDeleted<ExcalidrawGenericElement> =>\n  _newElementBase<ExcalidrawGenericElement>(opts.type, opts);\n\nexport const newTextElement = (\n  opts: {\n    text: string;\n    fontSize: number;\n    fontFamily: FontFamily;\n    textAlign: TextAlign;\n  } & ElementConstructorOpts,\n): NonDeleted<ExcalidrawTextElement> => {\n  const metrics = measureText(opts.text, getFontString(opts));\n  const textElement = newElementWith(\n    {\n      ..._newElementBase<ExcalidrawTextElement>(\"text\", opts),\n      text: opts.text,\n      fontSize: opts.fontSize,\n      fontFamily: opts.fontFamily,\n      textAlign: opts.textAlign,\n      // Center the text\n      x: opts.x - metrics.width / 2,\n      y: opts.y - metrics.height / 2,\n      width: metrics.width,\n      height: metrics.height,\n      baseline: metrics.baseline,\n    },\n    {},\n  );\n\n  return textElement;\n};\n\nexport const newLinearElement = (\n  opts: {\n    type: ExcalidrawLinearElement[\"type\"];\n    lastCommittedPoint?: ExcalidrawLinearElement[\"lastCommittedPoint\"];\n  } & ElementConstructorOpts,\n): NonDeleted<ExcalidrawLinearElement> => {\n  return {\n    ..._newElementBase<ExcalidrawLinearElement>(opts.type, opts),\n    points: [],\n    lastCommittedPoint: opts.lastCommittedPoint || null,\n  };\n};\n\n// Simplified deep clone for the purpose of cloning ExcalidrawElement only\n//  (doesn't clone Date, RegExp, Map, Set, Typed arrays etc.)\n//\n// Adapted from https://github.com/lukeed/klona\nexport const deepCopyElement = (val: any, depth: number = 0) => {\n  if (val == null || typeof val !== \"object\") {\n    return val;\n  }\n\n  if (Object.prototype.toString.call(val) === \"[object Object]\") {\n    const tmp =\n      typeof val.constructor === \"function\"\n        ? Object.create(Object.getPrototypeOf(val))\n        : {};\n    for (const key in val) {\n      if (val.hasOwnProperty(key)) {\n        // don't copy top-level shape property, which we want to regenerate\n        if (depth === 0 && (key === \"shape\" || key === \"canvas\")) {\n          continue;\n        }\n        tmp[key] = deepCopyElement(val[key], depth + 1);\n      }\n    }\n    return tmp;\n  }\n\n  if (Array.isArray(val)) {\n    let k = val.length;\n    const arr = new Array(k);\n    while (k--) {\n      arr[k] = deepCopyElement(val[k], depth + 1);\n    }\n    return arr;\n  }\n\n  return val;\n};\n\n/**\n * Duplicate an element, often used in the alt-drag operation.\n * Note that this method has gotten a bit complicated since the\n * introduction of gruoping/ungrouping elements.\n * @param editingGroupId The current group being edited. The new\n *                       element will inherit this group and its\n *                       parents.\n * @param groupIdMapForOperation A Map that maps old group IDs to\n *                               duplicated ones. If you are duplicating\n *                               multiple elements at once, share this map\n *                               amongst all of them\n * @param element Element to duplicate\n * @param overrides Any element properties to override\n */\nexport const duplicateElement = <TElement extends Mutable<ExcalidrawElement>>(\n  editingGroupId: AppState[\"editingGroupId\"],\n  groupIdMapForOperation: Map<GroupId, GroupId>,\n  element: TElement,\n  overrides?: Partial<TElement>,\n): TElement => {\n  let copy: TElement = deepCopyElement(element);\n  copy.id = randomId();\n  copy.seed = randomInteger();\n  copy.groupIds = getNewGroupIdsForDuplication(\n    copy.groupIds,\n    editingGroupId,\n    (groupId) => {\n      if (!groupIdMapForOperation.has(groupId)) {\n        groupIdMapForOperation.set(groupId, randomId());\n      }\n      return groupIdMapForOperation.get(groupId)!;\n    },\n  );\n  if (overrides) {\n    copy = Object.assign(copy, overrides);\n  }\n  return copy;\n};\n","import LanguageDetector from \"i18next-browser-languagedetector\";\n\nexport const languages = [\n  { lng: \"en\", label: \"English\", data: require(\"./locales/en.json\") },\n  { lng: \"bg-BG\", label: \"Български\", data: require(\"./locales/bg-BG.json\") },\n  { lng: \"de-DE\", label: \"Deutsch\", data: require(\"./locales/de-DE.json\") },\n  { lng: \"es-ES\", label: \"Español\", data: require(\"./locales/es-ES.json\") },\n  { lng: \"ca-ES\", label: \"Catalan\", data: require(\"./locales/ca-ES.json\") },\n  { lng: \"el-GR\", label: \"Ελληνικά\", data: require(\"./locales/el-GR.json\") },\n  { lng: \"fr-FR\", label: \"Français\", data: require(\"./locales/fr-FR.json\") },\n  {\n    lng: \"id-ID\",\n    label: \"Bahasa Indonesia\",\n    data: require(\"./locales/id-ID.json\"),\n  },\n  { lng: \"it-IT\", label: \"Italiano\", data: require(\"./locales/it-IT.json\") },\n  { lng: \"hu-HU\", label: \"Magyar\", data: require(\"./locales/hu-HU.json\") },\n  { lng: \"nl-NL\", label: \"Nederlands\", data: require(\"./locales/nl-NL.json\") },\n  { lng: \"no-No\", label: \"Norsk\", data: require(\"./locales/no-NO.json\") },\n  { lng: \"pl-PL\", label: \"Polski\", data: require(\"./locales/pl-PL.json\") },\n  { lng: \"pt-PT\", label: \"Português\", data: require(\"./locales/pt-PT.json\") },\n  { lng: \"ru-RU\", label: \"Русский\", data: require(\"./locales/ru-RU.json\") },\n  { lng: \"fi-FI\", label: \"Suomi\", data: require(\"./locales/fi-FI.json\") },\n  { lng: \"tr-TR\", label: \"Türkçe\", data: require(\"./locales/tr-TR.json\") },\n  { lng: \"ja-JP\", label: \"日本語\", data: require(\"./locales/ja-JP.json\") },\n  { lng: \"ko-KR\", label: \"한국어\", data: require(\"./locales/ko-KR.json\") },\n  { lng: \"zh-TW\", label: \"繁體中文\", data: require(\"./locales/zh-TW.json\") },\n  { lng: \"zh-CN\", label: \"简体中文\", data: require(\"./locales/zh-CN.json\") },\n  {\n    lng: \"ar-SA\",\n    label: \"العربية\",\n    data: require(\"./locales/ar-SA.json\"),\n    rtl: true,\n  },\n  {\n    lng: \"he-IL\",\n    label: \"עברית\",\n    data: require(\"./locales/he-IL.json\"),\n    rtl: true,\n  },\n];\n\nlet currentLanguage = languages[0];\nconst fallbackLanguage = languages[0];\n\nexport const setLanguage = (newLng: string | undefined) => {\n  currentLanguage =\n    languages.find((language) => language.lng === newLng) || fallbackLanguage;\n\n  document.documentElement.dir = currentLanguage.rtl ? \"rtl\" : \"ltr\";\n\n  languageDetector.cacheUserLanguage(currentLanguage.lng);\n};\n\nexport const getLanguage = () => currentLanguage;\n\nconst findPartsForData = (data: any, parts: string[]) => {\n  for (var i = 0; i < parts.length; ++i) {\n    const part = parts[i];\n    if (data[part] === undefined) {\n      return undefined;\n    }\n    data = data[part];\n  }\n  if (typeof data !== \"string\") {\n    return undefined;\n  }\n  return data;\n};\n\nexport const t = (path: string, replacement?: { [key: string]: string }) => {\n  const parts = path.split(\".\");\n  let translation =\n    findPartsForData(currentLanguage.data, parts) ||\n    findPartsForData(fallbackLanguage.data, parts);\n  if (translation === undefined) {\n    throw new Error(`Can't find translation for ${path}`);\n  }\n\n  if (replacement) {\n    for (var key in replacement) {\n      translation = translation.replace(`{{${key}}}`, replacement[key]);\n    }\n  }\n  return translation;\n};\n\nconst languageDetector = new LanguageDetector();\nlanguageDetector.init({\n  languageUtils: {\n    formatLanguageCode: (lng: string) => lng,\n    isWhitelisted: () => true,\n  },\n  checkWhitelist: false,\n});\n\nsetLanguage(languageDetector.detect());\n","import {\n  ExcalidrawElement,\n  NonDeletedExcalidrawElement,\n  NonDeleted,\n} from \"./types\";\nimport { isInvisiblySmallElement } from \"./sizeHelpers\";\n\nexport {\n  newElement,\n  newTextElement,\n  newLinearElement,\n  duplicateElement,\n} from \"./newElement\";\nexport {\n  getElementAbsoluteCoords,\n  getElementBounds,\n  getCommonBounds,\n  getDiamondPoints,\n  getArrowPoints,\n  getClosestElementBounds,\n} from \"./bounds\";\n\nexport {\n  OMIT_SIDES_FOR_MULTIPLE_ELEMENTS,\n  handlerRectanglesFromCoords,\n  handlerRectangles,\n} from \"./handlerRectangles\";\nexport { hitTest } from \"./collision\";\nexport {\n  resizeTest,\n  getCursorForResizingElement,\n  normalizeResizeHandle,\n  getElementWithResizeHandler,\n  getResizeHandlerFromCoords,\n} from \"./resizeTest\";\nexport {\n  resizeElements,\n  canResizeMutlipleElements,\n  getResizeOffsetXY,\n  getResizeArrowDirection,\n} from \"./resizeElements\";\nexport { isTextElement, isExcalidrawElement } from \"./typeChecks\";\nexport { textWysiwyg } from \"./textWysiwyg\";\nexport { redrawTextBoundingBox } from \"./textElement\";\nexport {\n  getPerfectElementSize,\n  isInvisiblySmallElement,\n  resizePerfectLineForNWHandler,\n  getNormalizedDimensions,\n} from \"./sizeHelpers\";\nexport { showSelectedShapeActions } from \"./showSelectedShapeActions\";\n\nexport const getSyncableElements = (\n  elements: readonly ExcalidrawElement[], // There are places in Excalidraw where synthetic invisibly small elements are added and removed.\n) =>\n  // It's probably best to keep those local otherwise there might be a race condition that\n  // gets the app into an invalid state. I've never seen it happen but I'm worried about it :)\n  elements.filter((el) => el.isDeleted || !isInvisiblySmallElement(el));\n\nexport const getElementMap = (elements: readonly ExcalidrawElement[]) =>\n  elements.reduce(\n    (acc: { [key: string]: ExcalidrawElement }, element: ExcalidrawElement) => {\n      acc[element.id] = element;\n      return acc;\n    },\n    {},\n  );\n\nexport const getDrawingVersion = (elements: readonly ExcalidrawElement[]) =>\n  elements.reduce((acc, el) => acc + el.version, 0);\n\nexport const getNonDeletedElements = (elements: readonly ExcalidrawElement[]) =>\n  elements.filter(\n    (element) => !element.isDeleted,\n  ) as readonly NonDeletedExcalidrawElement[];\n\nexport const isNonDeletedElement = <T extends ExcalidrawElement>(\n  element: T,\n): element is NonDeleted<T> => !element.isDeleted;\n","export const isDarwin = /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);\n\nexport const KEYS = {\n  ARROW_LEFT: \"ArrowLeft\",\n  ARROW_RIGHT: \"ArrowRight\",\n  ARROW_DOWN: \"ArrowDown\",\n  ARROW_UP: \"ArrowUp\",\n  ENTER: \"Enter\",\n  ESCAPE: \"Escape\",\n  DELETE: \"Delete\",\n  BACKSPACE: \"Backspace\",\n  CTRL_OR_CMD: isDarwin ? \"metaKey\" : \"ctrlKey\",\n  TAB: \"Tab\",\n  SPACE: \" \",\n  QUESTION_MARK: \"?\",\n  F_KEY_CODE: 70,\n  ALT_KEY_CODE: 18,\n  Z_KEY_CODE: 90,\n  G_KEY_CODE: 71,\n} as const;\n\nexport type Key = keyof typeof KEYS;\n\nexport const isArrowKey = (keyCode: string) =>\n  keyCode === KEYS.ARROW_LEFT ||\n  keyCode === KEYS.ARROW_RIGHT ||\n  keyCode === KEYS.ARROW_DOWN ||\n  keyCode === KEYS.ARROW_UP;\n\nexport const getResizeCenterPointKey = (event: MouseEvent | KeyboardEvent) =>\n  event.altKey || event.which === KEYS.ALT_KEY_CODE;\n\nexport const getResizeWithSidesSameLengthKey = (event: MouseEvent) =>\n  event.shiftKey;\n","import { ExcalidrawElement } from \"../element/types\";\nimport { getCommonBounds } from \"../element\";\nimport { FlooredNumber } from \"../types\";\nimport { ScrollBars } from \"./types\";\nimport { getGlobalCSSVariable } from \"../utils\";\nimport { getLanguage } from \"../i18n\";\n\nexport const SCROLLBAR_MARGIN = 4;\nexport const SCROLLBAR_WIDTH = 6;\nexport const SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\n\nexport const getScrollBars = (\n  elements: readonly ExcalidrawElement[],\n  viewportWidth: number,\n  viewportHeight: number,\n  {\n    scrollX,\n    scrollY,\n    zoom,\n  }: {\n    scrollX: FlooredNumber;\n    scrollY: FlooredNumber;\n    zoom: number;\n  },\n): ScrollBars => {\n  // This is the bounding box of all the elements\n  const [\n    elementsMinX,\n    elementsMinY,\n    elementsMaxX,\n    elementsMaxY,\n  ] = getCommonBounds(elements);\n\n  // Apply zoom\n  const viewportWidthWithZoom = viewportWidth / zoom;\n  const viewportHeightWithZoom = viewportHeight / zoom;\n\n  const viewportWidthDiff = viewportWidth - viewportWidthWithZoom;\n  const viewportHeightDiff = viewportHeight - viewportHeightWithZoom;\n\n  const safeArea = {\n    top: parseInt(getGlobalCSSVariable(\"sat\")),\n    bottom: parseInt(getGlobalCSSVariable(\"sab\")),\n    left: parseInt(getGlobalCSSVariable(\"sal\")),\n    right: parseInt(getGlobalCSSVariable(\"sar\")),\n  };\n\n  const isRTL = getLanguage().rtl;\n\n  // The viewport is the rectangle currently visible for the user\n  const viewportMinX = -scrollX + viewportWidthDiff / 2 + safeArea.left;\n  const viewportMinY = -scrollY + viewportHeightDiff / 2 + safeArea.top;\n  const viewportMaxX = viewportMinX + viewportWidthWithZoom - safeArea.right;\n  const viewportMaxY = viewportMinY + viewportHeightWithZoom - safeArea.bottom;\n\n  // The scene is the bounding box of both the elements and viewport\n  const sceneMinX = Math.min(elementsMinX, viewportMinX);\n  const sceneMinY = Math.min(elementsMinY, viewportMinY);\n  const sceneMaxX = Math.max(elementsMaxX, viewportMaxX);\n  const sceneMaxY = Math.max(elementsMaxY, viewportMaxY);\n\n  // The scrollbar represents where the viewport is in relationship to the scene\n\n  return {\n    horizontal:\n      viewportMinX === sceneMinX && viewportMaxX === sceneMaxX\n        ? null\n        : {\n            x:\n              Math.max(safeArea.left, SCROLLBAR_MARGIN) +\n              ((viewportMinX - sceneMinX) / (sceneMaxX - sceneMinX)) *\n                viewportWidth,\n            y:\n              viewportHeight -\n              SCROLLBAR_WIDTH -\n              Math.max(SCROLLBAR_MARGIN, safeArea.bottom),\n            width:\n              ((viewportMaxX - viewportMinX) / (sceneMaxX - sceneMinX)) *\n                viewportWidth -\n              Math.max(SCROLLBAR_MARGIN * 2, safeArea.left + safeArea.right),\n            height: SCROLLBAR_WIDTH,\n          },\n    vertical:\n      viewportMinY === sceneMinY && viewportMaxY === sceneMaxY\n        ? null\n        : {\n            x: isRTL\n              ? Math.max(safeArea.left, SCROLLBAR_MARGIN)\n              : viewportWidth -\n                SCROLLBAR_WIDTH -\n                Math.max(safeArea.right, SCROLLBAR_MARGIN),\n            y:\n              ((viewportMinY - sceneMinY) / (sceneMaxY - sceneMinY)) *\n                viewportHeight +\n              Math.max(safeArea.top, SCROLLBAR_MARGIN),\n            width: SCROLLBAR_WIDTH,\n            height:\n              ((viewportMaxY - viewportMinY) / (sceneMaxY - sceneMinY)) *\n                viewportHeight -\n              Math.max(SCROLLBAR_MARGIN * 2, safeArea.top + safeArea.bottom),\n          },\n  };\n};\n\nexport const isOverScrollBars = (\n  scrollBars: ScrollBars,\n  x: number,\n  y: number,\n) => {\n  const [isOverHorizontalScrollBar, isOverVerticalScrollBar] = [\n    scrollBars.horizontal,\n    scrollBars.vertical,\n  ].map((scrollBar) => {\n    return (\n      scrollBar &&\n      scrollBar.x <= x &&\n      x <= scrollBar.x + scrollBar.width &&\n      scrollBar.y <= y &&\n      y <= scrollBar.y + scrollBar.height\n    );\n  });\n\n  return {\n    isOverHorizontalScrollBar,\n    isOverVerticalScrollBar,\n  };\n};\n","import { AppState, FlooredNumber } from \"../types\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { getCommonBounds, getClosestElementBounds } from \"../element\";\n\nimport {\n  sceneCoordsToViewportCoords,\n  viewportCoordsToSceneCoords,\n} from \"../utils\";\n\nexport const normalizeScroll = (pos: number) =>\n  Math.floor(pos) as FlooredNumber;\n\nfunction isOutsideViewPort(\n  appState: AppState,\n  canvas: HTMLCanvasElement | null,\n  cords: Array<number>,\n) {\n  const [x1, y1, x2, y2] = cords;\n  const { x: viewportX1, y: viewportY1 } = sceneCoordsToViewportCoords(\n    { sceneX: x1, sceneY: y1 },\n    appState,\n    canvas,\n    window.devicePixelRatio,\n  );\n  const { x: viewportX2, y: viewportY2 } = sceneCoordsToViewportCoords(\n    { sceneX: x2, sceneY: y2 },\n    appState,\n    canvas,\n    window.devicePixelRatio,\n  );\n  return (\n    viewportX2 - viewportX1 > window.innerWidth ||\n    viewportY2 - viewportY1 > window.innerHeight\n  );\n}\n\nexport const calculateScrollCenter = (\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  canvas: HTMLCanvasElement | null,\n): { scrollX: FlooredNumber; scrollY: FlooredNumber } => {\n  if (!elements.length) {\n    return {\n      scrollX: normalizeScroll(0),\n      scrollY: normalizeScroll(0),\n    };\n  }\n  const scale = window.devicePixelRatio;\n  let [x1, y1, x2, y2] = getCommonBounds(elements);\n  if (isOutsideViewPort(appState, canvas, [x1, y1, x2, y2])) {\n    [x1, y1, x2, y2] = getClosestElementBounds(\n      elements,\n      viewportCoordsToSceneCoords(\n        { clientX: appState.scrollX, clientY: appState.scrollY },\n        appState,\n        canvas,\n        scale,\n      ),\n    );\n  }\n\n  const centerX = (x1 + x2) / 2;\n  const centerY = (y1 + y2) / 2;\n\n  return {\n    scrollX: normalizeScroll(window.innerWidth / 2 - centerX),\n    scrollY: normalizeScroll(window.innerHeight / 2 - centerY),\n  };\n};\n","export const getZoomOrigin = (\n  canvas: HTMLCanvasElement | null,\n  scale: number,\n) => {\n  if (canvas === null) {\n    return { x: 0, y: 0 };\n  }\n  const context = canvas.getContext(\"2d\");\n  if (context === null) {\n    return { x: 0, y: 0 };\n  }\n\n  const normalizedCanvasWidth = canvas.width / scale;\n  const normalizedCanvasHeight = canvas.height / scale;\n\n  return {\n    x: normalizedCanvasWidth / 2,\n    y: normalizedCanvasHeight / 2,\n  };\n};\n\nexport const getNormalizedZoom = (zoom: number): number => {\n  const normalizedZoom = parseFloat(zoom.toFixed(2));\n  const clampedZoom = Math.max(0.1, Math.min(normalizedZoom, 2));\n  return clampedZoom;\n};\n","import {\n  ExcalidrawElement,\n  NonDeletedExcalidrawElement,\n  NonDeleted,\n} from \"../element/types\";\nimport {\n  getNonDeletedElements,\n  isNonDeletedElement,\n  getElementMap,\n} from \"../element\";\n\nexport interface SceneStateCallback {\n  (): void;\n}\n\nexport interface SceneStateCallbackRemover {\n  (): void;\n}\n\nclass GlobalScene {\n  private callbacks: Set<SceneStateCallback> = new Set();\n\n  private nonDeletedElements: readonly NonDeletedExcalidrawElement[] = [];\n  private elements: readonly ExcalidrawElement[] = [];\n  private elementsMap: {\n    [id: string]: ExcalidrawElement;\n  } = {};\n\n  getElementsIncludingDeleted() {\n    return this.elements;\n  }\n\n  getElements(): readonly NonDeletedExcalidrawElement[] {\n    return this.nonDeletedElements;\n  }\n\n  getElement(id: ExcalidrawElement[\"id\"]): ExcalidrawElement | null {\n    return this.elementsMap[id] || null;\n  }\n\n  getNonDeletedElement(\n    id: ExcalidrawElement[\"id\"],\n  ): NonDeleted<ExcalidrawElement> | null {\n    const element = this.getElement(id);\n    if (element && isNonDeletedElement(element)) {\n      return element;\n    }\n    return null;\n  }\n\n  replaceAllElements(nextElements: readonly ExcalidrawElement[]) {\n    this.elements = nextElements;\n    this.elementsMap = getElementMap(nextElements);\n    this.nonDeletedElements = getNonDeletedElements(this.elements);\n    this.informMutation();\n  }\n\n  informMutation() {\n    for (const callback of Array.from(this.callbacks)) {\n      callback();\n    }\n  }\n\n  addCallback(cb: SceneStateCallback): SceneStateCallbackRemover {\n    if (this.callbacks.has(cb)) {\n      throw new Error();\n    }\n\n    this.callbacks.add(cb);\n\n    return () => {\n      if (!this.callbacks.has(cb)) {\n        throw new Error();\n      }\n      this.callbacks.delete(cb);\n    };\n  }\n}\n\nexport const globalSceneState = new GlobalScene();\n","import { FlooredNumber } from \"./types\";\nimport { getZoomOrigin } from \"./scene\";\nimport { CURSOR_TYPE, FONT_FAMILY } from \"./constants\";\nimport { FontFamily, FontString } from \"./element/types\";\n\nexport const SVG_NS = \"http://www.w3.org/2000/svg\";\n\nlet mockDateTime: string | null = null;\n\nexport const setDateTimeForTests = (dateTime: string) => {\n  mockDateTime = dateTime;\n};\n\nexport const getDateTime = () => {\n  if (mockDateTime) {\n    return mockDateTime;\n  }\n\n  const date = new Date();\n  const year = date.getFullYear();\n  const month = `${date.getMonth() + 1}`.padStart(2, \"0\");\n  const day = `${date.getDate()}`.padStart(2, \"0\");\n  const hr = `${date.getHours()}`.padStart(2, \"0\");\n  const min = `${date.getMinutes()}`.padStart(2, \"0\");\n\n  return `${year}-${month}-${day}-${hr}${min}`;\n};\n\nexport const capitalizeString = (str: string) =>\n  str.charAt(0).toUpperCase() + str.slice(1);\n\nexport const isToolIcon = (\n  target: Element | EventTarget | null,\n): target is HTMLElement =>\n  target instanceof HTMLElement && target.className.includes(\"ToolIcon\");\n\nexport const isInputLike = (\n  target: Element | EventTarget | null,\n): target is\n  | HTMLInputElement\n  | HTMLTextAreaElement\n  | HTMLSelectElement\n  | HTMLBRElement\n  | HTMLDivElement =>\n  (target instanceof HTMLElement && target.dataset.type === \"wysiwyg\") ||\n  target instanceof HTMLBRElement || // newline in wysiwyg\n  target instanceof HTMLInputElement ||\n  target instanceof HTMLTextAreaElement ||\n  target instanceof HTMLSelectElement;\n\nexport const isWritableElement = (\n  target: Element | EventTarget | null,\n): target is\n  | HTMLInputElement\n  | HTMLTextAreaElement\n  | HTMLBRElement\n  | HTMLDivElement =>\n  (target instanceof HTMLElement && target.dataset.type === \"wysiwyg\") ||\n  target instanceof HTMLBRElement || // newline in wysiwyg\n  target instanceof HTMLTextAreaElement ||\n  (target instanceof HTMLInputElement &&\n    (target.type === \"text\" || target.type === \"number\"));\n\nexport const getFontFamilyString = ({\n  fontFamily,\n}: {\n  fontFamily: FontFamily;\n}) => {\n  return FONT_FAMILY[fontFamily];\n};\n\n/** returns fontSize+fontFamily string for assignment to DOM elements */\nexport const getFontString = ({\n  fontSize,\n  fontFamily,\n}: {\n  fontSize: number;\n  fontFamily: FontFamily;\n}) => {\n  return `${fontSize}px ${getFontFamilyString({ fontFamily })}` as FontString;\n};\n\n// https://github.com/grassator/canvas-text-editor/blob/master/lib/FontMetrics.js\nexport const measureText = (text: string, font: FontString) => {\n  const line = document.createElement(\"div\");\n  const body = document.body;\n  line.style.position = \"absolute\";\n  line.style.whiteSpace = \"pre\";\n  line.style.font = font;\n  body.appendChild(line);\n  // Now we can measure width and height of the letter\n  line.innerText = text;\n  const width = line.offsetWidth;\n  const height = line.offsetHeight;\n  // Now creating 1px sized item that will be aligned to baseline\n  // to calculate baseline shift\n  const span = document.createElement(\"span\");\n  span.style.display = \"inline-block\";\n  span.style.overflow = \"hidden\";\n  span.style.width = \"1px\";\n  span.style.height = \"1px\";\n  line.appendChild(span);\n  // Baseline is important for positioning text on canvas\n  const baseline = span.offsetTop + span.offsetHeight;\n  document.body.removeChild(line);\n\n  return { width, height, baseline };\n};\n\nexport const debounce = <T extends any[]>(\n  fn: (...args: T) => void,\n  timeout: number,\n) => {\n  let handle = 0;\n  let lastArgs: T;\n  const ret = (...args: T) => {\n    lastArgs = args;\n    clearTimeout(handle);\n    handle = window.setTimeout(() => fn(...args), timeout);\n  };\n  ret.flush = () => {\n    clearTimeout(handle);\n    fn(...lastArgs);\n  };\n  return ret;\n};\n\nexport const selectNode = (node: Element) => {\n  const selection = window.getSelection();\n  if (selection) {\n    const range = document.createRange();\n    range.selectNodeContents(node);\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n};\n\nexport const removeSelection = () => {\n  const selection = window.getSelection();\n  if (selection) {\n    selection.removeAllRanges();\n  }\n};\n\nexport const distance = (x: number, y: number) => Math.abs(x - y);\n\nexport const resetCursor = () => {\n  document.documentElement.style.cursor = \"\";\n};\n\nexport const setCursorForShape = (shape: string) => {\n  if (shape === \"selection\") {\n    resetCursor();\n  } else {\n    document.documentElement.style.cursor = CURSOR_TYPE.CROSSHAIR;\n  }\n};\n\nexport const isFullScreen = () =>\n  document.fullscreenElement?.nodeName === \"HTML\";\n\nexport const allowFullScreen = () =>\n  document.documentElement.requestFullscreen();\n\nexport const exitFullScreen = () => document.exitFullscreen();\n\nexport const getShortcutKey = (shortcut: string): string => {\n  const isMac = /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);\n  if (isMac) {\n    return `${shortcut\n      .replace(/\\bCtrlOrCmd\\b/i, \"Cmd\")\n      .replace(/\\bAlt\\b/i, \"Option\")\n      .replace(/\\bDel\\b/i, \"Delete\")\n      .replace(/\\b(Enter|Return)\\b/i, \"Enter\")}`;\n  }\n  return `${shortcut.replace(/\\bCtrlOrCmd\\b/i, \"Ctrl\")}`;\n};\nexport const viewportCoordsToSceneCoords = (\n  { clientX, clientY }: { clientX: number; clientY: number },\n  {\n    scrollX,\n    scrollY,\n    zoom,\n  }: {\n    scrollX: FlooredNumber;\n    scrollY: FlooredNumber;\n    zoom: number;\n  },\n  canvas: HTMLCanvasElement | null,\n  scale: number,\n) => {\n  const zoomOrigin = getZoomOrigin(canvas, scale);\n  const clientXWithZoom = zoomOrigin.x + (clientX - zoomOrigin.x) / zoom;\n  const clientYWithZoom = zoomOrigin.y + (clientY - zoomOrigin.y) / zoom;\n\n  const x = clientXWithZoom - scrollX;\n  const y = clientYWithZoom - scrollY;\n\n  return { x, y };\n};\n\nexport const sceneCoordsToViewportCoords = (\n  { sceneX, sceneY }: { sceneX: number; sceneY: number },\n  {\n    scrollX,\n    scrollY,\n    zoom,\n  }: {\n    scrollX: FlooredNumber;\n    scrollY: FlooredNumber;\n    zoom: number;\n  },\n  canvas: HTMLCanvasElement | null,\n  scale: number,\n) => {\n  const zoomOrigin = getZoomOrigin(canvas, scale);\n  const sceneXWithZoomAndScroll =\n    zoomOrigin.x - (zoomOrigin.x - sceneX - scrollX) * zoom;\n  const sceneYWithZoomAndScroll =\n    zoomOrigin.y - (zoomOrigin.y - sceneY - scrollY) * zoom;\n\n  const x = sceneXWithZoomAndScroll;\n  const y = sceneYWithZoomAndScroll;\n\n  return { x, y };\n};\n\nexport const getGlobalCSSVariable = (name: string) =>\n  getComputedStyle(document.documentElement).getPropertyValue(`--${name}`);\n","import oc from \"open-color\";\nimport { AppState, FlooredNumber } from \"./types\";\nimport { getDateTime } from \"./utils\";\nimport { t } from \"./i18n\";\nimport { FontFamily } from \"./element/types\";\n\nexport const DEFAULT_FONT_SIZE = 20;\nexport const DEFAULT_FONT_FAMILY: FontFamily = 1;\nexport const DEFAULT_TEXT_ALIGN = \"left\";\n\nexport const getDefaultAppState = (): AppState => {\n  return {\n    isLoading: false,\n    errorMessage: null,\n    draggingElement: null,\n    resizingElement: null,\n    multiElement: null,\n    editingElement: null,\n    editingLinearElement: null,\n    elementType: \"selection\",\n    elementLocked: false,\n    exportBackground: true,\n    shouldAddWatermark: false,\n    currentItemStrokeColor: oc.black,\n    currentItemBackgroundColor: \"transparent\",\n    currentItemFillStyle: \"hachure\",\n    currentItemStrokeWidth: 1,\n    currentItemStrokeStyle: \"solid\",\n    currentItemRoughness: 1,\n    currentItemOpacity: 100,\n    currentItemFontSize: DEFAULT_FONT_SIZE,\n    currentItemFontFamily: DEFAULT_FONT_FAMILY,\n    currentItemTextAlign: DEFAULT_TEXT_ALIGN,\n    viewBackgroundColor: oc.white,\n    scrollX: 0 as FlooredNumber,\n    scrollY: 0 as FlooredNumber,\n    cursorX: 0,\n    cursorY: 0,\n    cursorButton: \"up\",\n    scrolledOutside: false,\n    name: `${t(\"labels.untitled\")}-${getDateTime()}`,\n    username: \"\",\n    isCollaborating: false,\n    isResizing: false,\n    isRotating: false,\n    selectionElement: null,\n    zoom: 1,\n    openMenu: null,\n    lastPointerDownWith: \"mouse\",\n    selectedElementIds: {},\n    collaborators: new Map(),\n    shouldCacheIgnoreZoom: false,\n    showShortcutsDialog: false,\n    zenModeEnabled: false,\n    editingGroupId: null,\n    selectedGroupIds: {},\n  };\n};\n\nexport const clearAppStateForLocalStorage = (appState: AppState) => {\n  const {\n    draggingElement,\n    resizingElement,\n    multiElement,\n    editingElement,\n    selectionElement,\n    isResizing,\n    isRotating,\n    collaborators,\n    isCollaborating,\n    isLoading,\n    errorMessage,\n    showShortcutsDialog,\n    editingLinearElement,\n    ...exportedState\n  } = appState;\n  return exportedState;\n};\n\nexport const cleanAppStateForExport = (appState: AppState) => {\n  return {\n    viewBackgroundColor: appState.viewBackgroundColor,\n  };\n};\n","import oc from \"open-color\";\n\nconst shades = (i: number) => [\n  oc.red[i],\n  oc.pink[i],\n  oc.grape[i],\n  oc.violet[i],\n  oc.indigo[i],\n  oc.blue[i],\n  oc.cyan[i],\n  oc.teal[i],\n  oc.green[i],\n  oc.lime[i],\n  oc.yellow[i],\n  oc.orange[i],\n];\n\nexport default {\n  canvasBackground: [oc.white, oc.gray[0], oc.gray[1], ...shades(0)],\n  elementBackground: [\"transparent\", oc.gray[4], oc.gray[6], ...shades(6)],\n  elementStroke: [oc.black, oc.gray[8], oc.gray[7], ...shades(9)],\n};\n","import {\n  NonDeleted,\n  ExcalidrawLinearElement,\n  ExcalidrawElement,\n} from \"./types\";\nimport { distance2d, rotate, isPathALoop } from \"../math\";\nimport { getElementAbsoluteCoords } from \".\";\nimport { getElementPointsCoords } from \"./bounds\";\nimport { Point, AppState } from \"../types\";\nimport { mutateElement } from \"./mutateElement\";\nimport { SceneHistory } from \"../history\";\nimport { globalSceneState } from \"../scene\";\n\nexport class LinearElementEditor {\n  public elementId: ExcalidrawElement[\"id\"];\n  public activePointIndex: number | null;\n  public draggingElementPointIndex: number | null;\n  public lastUncommittedPoint: Point | null;\n\n  constructor(element: NonDeleted<ExcalidrawLinearElement>) {\n    LinearElementEditor.normalizePoints(element);\n\n    this.elementId = element.id;\n    this.activePointIndex = null;\n    this.lastUncommittedPoint = null;\n    this.draggingElementPointIndex = null;\n  }\n\n  // ---------------------------------------------------------------------------\n  // static methods\n  // ---------------------------------------------------------------------------\n\n  static POINT_HANDLE_SIZE = 20;\n\n  static getElement(id: ExcalidrawElement[\"id\"]) {\n    const element = globalSceneState.getNonDeletedElement(id);\n    if (element) {\n      return element as NonDeleted<ExcalidrawLinearElement>;\n    }\n    return null;\n  }\n\n  /** @returns whether point was dragged */\n  static handlePointDragging(\n    appState: AppState,\n    setState: React.Component<any, AppState>[\"setState\"],\n    scenePointerX: number,\n    scenePointerY: number,\n    lastX: number,\n    lastY: number,\n  ): boolean {\n    if (!appState.editingLinearElement) {\n      return false;\n    }\n    const { editingLinearElement } = appState;\n    let { draggingElementPointIndex, elementId } = editingLinearElement;\n\n    const element = LinearElementEditor.getElement(elementId);\n    if (!element) {\n      return false;\n    }\n\n    const clickedPointIndex =\n      draggingElementPointIndex ??\n      LinearElementEditor.getPointIndexUnderCursor(\n        element,\n        appState.zoom,\n        scenePointerX,\n        scenePointerY,\n      );\n\n    draggingElementPointIndex = draggingElementPointIndex ?? clickedPointIndex;\n    if (draggingElementPointIndex > -1) {\n      if (\n        editingLinearElement.draggingElementPointIndex !==\n          draggingElementPointIndex ||\n        editingLinearElement.activePointIndex !== clickedPointIndex\n      ) {\n        setState({\n          editingLinearElement: {\n            ...editingLinearElement,\n            draggingElementPointIndex,\n            activePointIndex: clickedPointIndex,\n          },\n        });\n      }\n\n      const [deltaX, deltaY] = rotate(\n        scenePointerX - lastX,\n        scenePointerY - lastY,\n        0,\n        0,\n        -element.angle,\n      );\n      const targetPoint = element.points[clickedPointIndex];\n      LinearElementEditor.movePoint(element, clickedPointIndex, [\n        targetPoint[0] + deltaX,\n        targetPoint[1] + deltaY,\n      ]);\n      return true;\n    }\n    return false;\n  }\n\n  static handlePointerUp(\n    editingLinearElement: LinearElementEditor,\n  ): LinearElementEditor {\n    const { elementId, draggingElementPointIndex } = editingLinearElement;\n    const element = LinearElementEditor.getElement(elementId);\n    if (!element) {\n      return editingLinearElement;\n    }\n\n    if (\n      draggingElementPointIndex !== null &&\n      (draggingElementPointIndex === 0 ||\n        draggingElementPointIndex === element.points.length - 1) &&\n      isPathALoop(element.points)\n    ) {\n      LinearElementEditor.movePoint(\n        element,\n        draggingElementPointIndex,\n        draggingElementPointIndex === 0\n          ? element.points[element.points.length - 1]\n          : element.points[0],\n      );\n    }\n    if (draggingElementPointIndex !== null) {\n      return {\n        ...editingLinearElement,\n        draggingElementPointIndex: null,\n      };\n    }\n    return editingLinearElement;\n  }\n\n  static handlePointerDown(\n    event: React.PointerEvent<HTMLCanvasElement>,\n    appState: AppState,\n    setState: React.Component<any, AppState>[\"setState\"],\n    history: SceneHistory,\n    scenePointerX: number,\n    scenePointerY: number,\n  ): {\n    didAddPoint: boolean;\n    hitElement: ExcalidrawElement | null;\n  } {\n    const ret: ReturnType<typeof LinearElementEditor[\"handlePointerDown\"]> = {\n      didAddPoint: false,\n      hitElement: null,\n    };\n\n    if (!appState.editingLinearElement) {\n      return ret;\n    }\n\n    const { elementId } = appState.editingLinearElement;\n    const element = LinearElementEditor.getElement(elementId);\n\n    if (!element) {\n      return ret;\n    }\n\n    if (event.altKey) {\n      if (!appState.editingLinearElement.lastUncommittedPoint) {\n        mutateElement(element, {\n          points: [\n            ...element.points,\n            LinearElementEditor.createPointAt(\n              element,\n              scenePointerX,\n              scenePointerY,\n            ),\n          ],\n        });\n      }\n      if (appState.editingLinearElement.lastUncommittedPoint !== null) {\n        history.resumeRecording();\n      }\n      setState({\n        editingLinearElement: {\n          ...appState.editingLinearElement,\n          activePointIndex: element.points.length - 1,\n          lastUncommittedPoint: null,\n        },\n      });\n      ret.didAddPoint = true;\n      return ret;\n    }\n\n    const clickedPointIndex = LinearElementEditor.getPointIndexUnderCursor(\n      element,\n      appState.zoom,\n      scenePointerX,\n      scenePointerY,\n    );\n\n    // if we clicked on a point, set the element as hitElement otherwise\n    //  it would get deselected if the point is outside the hitbox area\n    if (clickedPointIndex > -1) {\n      ret.hitElement = element;\n    }\n\n    setState({\n      editingLinearElement: {\n        ...appState.editingLinearElement,\n        activePointIndex: clickedPointIndex > -1 ? clickedPointIndex : null,\n      },\n    });\n    return ret;\n  }\n\n  static handlePointerMove(\n    event: React.PointerEvent<HTMLCanvasElement>,\n    scenePointerX: number,\n    scenePointerY: number,\n    editingLinearElement: LinearElementEditor,\n  ): LinearElementEditor {\n    const { elementId, lastUncommittedPoint } = editingLinearElement;\n    const element = LinearElementEditor.getElement(elementId);\n    if (!element) {\n      return editingLinearElement;\n    }\n\n    const { points } = element;\n    const lastPoint = points[points.length - 1];\n\n    if (!event.altKey) {\n      if (lastPoint === lastUncommittedPoint) {\n        LinearElementEditor.movePoint(element, points.length - 1, \"delete\");\n      }\n      return editingLinearElement;\n    }\n\n    const newPoint = LinearElementEditor.createPointAt(\n      element,\n      scenePointerX,\n      scenePointerY,\n    );\n\n    if (lastPoint === lastUncommittedPoint) {\n      LinearElementEditor.movePoint(\n        element,\n        element.points.length - 1,\n        newPoint,\n      );\n    } else {\n      LinearElementEditor.movePoint(element, \"new\", newPoint);\n    }\n\n    return {\n      ...editingLinearElement,\n      lastUncommittedPoint: element.points[element.points.length - 1],\n    };\n  }\n\n  static getPointsGlobalCoordinates(\n    element: NonDeleted<ExcalidrawLinearElement>,\n  ) {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n    const cx = (x1 + x2) / 2;\n    const cy = (y1 + y2) / 2;\n    return element.points.map((point) => {\n      let { x, y } = element;\n      [x, y] = rotate(x + point[0], y + point[1], cx, cy, element.angle);\n      return [x, y];\n    });\n  }\n\n  static getPointIndexUnderCursor(\n    element: NonDeleted<ExcalidrawLinearElement>,\n    zoom: AppState[\"zoom\"],\n    x: number,\n    y: number,\n  ) {\n    const pointHandles = this.getPointsGlobalCoordinates(element);\n    let idx = pointHandles.length;\n    // loop from right to left because points on the right are rendered over\n    //  points on the left, thus should take precedence when clicking, if they\n    //  overlap\n    while (--idx > -1) {\n      const point = pointHandles[idx];\n      if (\n        distance2d(x, y, point[0], point[1]) * zoom <\n        // +1px to account for outline stroke\n        this.POINT_HANDLE_SIZE / 2 + 1\n      ) {\n        return idx;\n      }\n    }\n    return -1;\n  }\n\n  static createPointAt(\n    element: NonDeleted<ExcalidrawLinearElement>,\n    scenePointerX: number,\n    scenePointerY: number,\n  ): Point {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n    const cx = (x1 + x2) / 2;\n    const cy = (y1 + y2) / 2;\n    const [rotatedX, rotatedY] = rotate(\n      scenePointerX,\n      scenePointerY,\n      cx,\n      cy,\n      -element.angle,\n    );\n\n    return [rotatedX - element.x, rotatedY - element.y];\n  }\n\n  // element-mutating methods\n  // ---------------------------------------------------------------------------\n\n  /**\n   * Normalizes line points so that the start point is at [0,0]. This is\n   *  expected in various parts of the codebase.\n   */\n  static normalizePoints(element: NonDeleted<ExcalidrawLinearElement>) {\n    const { points } = element;\n\n    const offsetX = points[0][0];\n    const offsetY = points[0][1];\n\n    mutateElement(element, {\n      points: points.map((point, _idx) => {\n        return [point[0] - offsetX, point[1] - offsetY] as const;\n      }),\n      x: element.x + offsetX,\n      y: element.y + offsetY,\n    });\n  }\n\n  static movePoint(\n    element: NonDeleted<ExcalidrawLinearElement>,\n    pointIndex: number | \"new\",\n    targetPosition: Point | \"delete\",\n  ) {\n    const { points } = element;\n\n    // in case we're moving start point, instead of modifying its position\n    //  which would break the invariant of it being at [0,0], we move\n    //  all the other points in the opposite direction by delta to\n    //  offset it. We do the same with actual element.x/y position, so\n    //  this hacks are completely transparent to the user.\n    let offsetX = 0;\n    let offsetY = 0;\n\n    let nextPoints: (readonly [number, number])[];\n    if (targetPosition === \"delete\") {\n      // remove point\n      if (pointIndex === \"new\") {\n        throw new Error(\"invalid args in movePoint\");\n      }\n      nextPoints = points.slice();\n      nextPoints.splice(pointIndex, 1);\n      if (pointIndex === 0) {\n        // if deleting first point, make the next to be [0,0] and recalculate\n        //  positions of the rest with respect to it\n        offsetX = nextPoints[0][0];\n        offsetY = nextPoints[0][1];\n        nextPoints = nextPoints.map((point, idx) => {\n          if (idx === 0) {\n            return [0, 0];\n          }\n          return [point[0] - offsetX, point[1] - offsetY];\n        });\n      }\n    } else if (pointIndex === \"new\") {\n      nextPoints = [...points, targetPosition];\n    } else {\n      const deltaX = targetPosition[0] - points[pointIndex][0];\n      const deltaY = targetPosition[1] - points[pointIndex][1];\n      nextPoints = points.map((point, idx) => {\n        if (idx === pointIndex) {\n          if (idx === 0) {\n            offsetX = deltaX;\n            offsetY = deltaY;\n            return point;\n          }\n          offsetX = 0;\n          offsetY = 0;\n\n          return [point[0] + deltaX, point[1] + deltaY] as const;\n        }\n        return offsetX || offsetY\n          ? ([point[0] - offsetX, point[1] - offsetY] as const)\n          : point;\n      });\n    }\n\n    const nextCoords = getElementPointsCoords(element, nextPoints);\n    const prevCoords = getElementPointsCoords(element, points);\n    const nextCenterX = (nextCoords[0] + nextCoords[2]) / 2;\n    const nextCenterY = (nextCoords[1] + nextCoords[3]) / 2;\n    const prevCenterX = (prevCoords[0] + prevCoords[2]) / 2;\n    const prevCenterY = (prevCoords[1] + prevCoords[3]) / 2;\n    const dX = prevCenterX - nextCenterX;\n    const dY = prevCenterY - nextCenterY;\n    const rotated = rotate(offsetX, offsetY, dX, dY, element.angle);\n\n    mutateElement(element, {\n      points: nextPoints,\n      x: element.x + rotated[0],\n      y: element.y + rotated[1],\n    });\n  }\n}\n","import { RoughCanvas } from \"roughjs/bin/canvas\";\nimport { RoughSVG } from \"roughjs/bin/svg\";\nimport oc from \"open-color\";\n\nimport { FlooredNumber, AppState } from \"../types\";\nimport {\n  ExcalidrawElement,\n  NonDeletedExcalidrawElement,\n  ExcalidrawLinearElement,\n  NonDeleted,\n  GroupId,\n} from \"../element/types\";\nimport {\n  getElementAbsoluteCoords,\n  OMIT_SIDES_FOR_MULTIPLE_ELEMENTS,\n  handlerRectanglesFromCoords,\n  handlerRectangles,\n  getCommonBounds,\n  canResizeMutlipleElements,\n} from \"../element\";\n\nimport { roundRect } from \"./roundRect\";\nimport { SceneState } from \"../scene/types\";\nimport {\n  getScrollBars,\n  SCROLLBAR_COLOR,\n  SCROLLBAR_WIDTH,\n} from \"../scene/scrollbars\";\nimport { getSelectedElements } from \"../scene/selection\";\n\nimport { renderElement, renderElementToSvg } from \"./renderElement\";\nimport colors from \"../colors\";\nimport { isLinearElement } from \"../element/typeChecks\";\nimport { LinearElementEditor } from \"../element/linearElementEditor\";\nimport {\n  isSelectedViaGroup,\n  getSelectedGroupIds,\n  getElementsInGroup,\n} from \"../groups\";\n\ntype HandlerRectanglesRet = keyof ReturnType<typeof handlerRectangles>;\n\nconst colorsForClientId = (clientId: string) => {\n  // Naive way of getting an integer out of the clientId\n  const sum = clientId.split(\"\").reduce((a, str) => a + str.charCodeAt(0), 0);\n\n  // Skip transparent background.\n  const backgrounds = colors.elementBackground.slice(1);\n  const strokes = colors.elementStroke.slice(1);\n  return {\n    background: backgrounds[sum % backgrounds.length],\n    stroke: strokes[sum % strokes.length],\n  };\n};\n\nconst strokeRectWithRotation = (\n  context: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  cx: number,\n  cy: number,\n  angle: number,\n  fill?: boolean,\n) => {\n  context.translate(cx, cy);\n  context.rotate(angle);\n  if (fill) {\n    context.fillRect(x - cx, y - cy, width, height);\n  }\n  context.strokeRect(x - cx, y - cy, width, height);\n  context.rotate(-angle);\n  context.translate(-cx, -cy);\n};\n\nconst strokeCircle = (\n  context: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n) => {\n  context.beginPath();\n  context.arc(x + width / 2, y + height / 2, width / 2, 0, Math.PI * 2);\n  context.fill();\n  context.stroke();\n};\n\nconst renderLinearPointHandles = (\n  context: CanvasRenderingContext2D,\n  appState: AppState,\n  sceneState: SceneState,\n  element: NonDeleted<ExcalidrawLinearElement>,\n) => {\n  context.translate(sceneState.scrollX, sceneState.scrollY);\n  const origStrokeStyle = context.strokeStyle;\n  const lineWidth = context.lineWidth;\n  context.lineWidth = 1 / sceneState.zoom;\n\n  LinearElementEditor.getPointsGlobalCoordinates(element).forEach(\n    (point, idx) => {\n      context.strokeStyle = \"red\";\n      context.setLineDash([]);\n      context.fillStyle =\n        appState.editingLinearElement?.activePointIndex === idx\n          ? \"rgba(255, 127, 127, 0.9)\"\n          : \"rgba(255, 255, 255, 0.9)\";\n      const { POINT_HANDLE_SIZE } = LinearElementEditor;\n      strokeCircle(\n        context,\n        point[0] - POINT_HANDLE_SIZE / 2 / sceneState.zoom,\n        point[1] - POINT_HANDLE_SIZE / 2 / sceneState.zoom,\n        POINT_HANDLE_SIZE / sceneState.zoom,\n        POINT_HANDLE_SIZE / sceneState.zoom,\n      );\n    },\n  );\n  context.setLineDash([]);\n  context.lineWidth = lineWidth;\n  context.translate(-sceneState.scrollX, -sceneState.scrollY);\n  context.strokeStyle = origStrokeStyle;\n};\n\nexport const renderScene = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n  selectionElement: NonDeletedExcalidrawElement | null,\n  scale: number,\n  rc: RoughCanvas,\n  canvas: HTMLCanvasElement,\n  sceneState: SceneState,\n  // extra options, currently passed by export helper\n  {\n    renderScrollbars = true,\n    renderSelection = true,\n    // Whether to employ render optimizations to improve performance.\n    // Should not be turned on for export operations and similar, because it\n    //  doesn't guarantee pixel-perfect output.\n    renderOptimizations = false,\n  }: {\n    renderScrollbars?: boolean;\n    renderSelection?: boolean;\n    renderOptimizations?: boolean;\n  } = {},\n) => {\n  if (!canvas) {\n    return { atLeastOneVisibleElement: false };\n  }\n\n  const context = canvas.getContext(\"2d\")!;\n  context.scale(scale, scale);\n\n  // When doing calculations based on canvas width we should used normalized one\n  const normalizedCanvasWidth = canvas.width / scale;\n  const normalizedCanvasHeight = canvas.height / scale;\n\n  // Paint background\n  if (typeof sceneState.viewBackgroundColor === \"string\") {\n    const hasTransparence =\n      sceneState.viewBackgroundColor === \"transparent\" ||\n      sceneState.viewBackgroundColor.length === 5 || // #RGBA\n      sceneState.viewBackgroundColor.length === 9 || // #RRGGBBA\n      /(hsla|rgba)\\(/.test(sceneState.viewBackgroundColor);\n    if (hasTransparence) {\n      context.clearRect(0, 0, normalizedCanvasWidth, normalizedCanvasHeight);\n    }\n    const fillStyle = context.fillStyle;\n    context.fillStyle = sceneState.viewBackgroundColor;\n    context.fillRect(0, 0, normalizedCanvasWidth, normalizedCanvasHeight);\n    context.fillStyle = fillStyle;\n  } else {\n    context.clearRect(0, 0, normalizedCanvasWidth, normalizedCanvasHeight);\n  }\n\n  // Apply zoom\n  const zoomTranslationX = (-normalizedCanvasWidth * (sceneState.zoom - 1)) / 2;\n  const zoomTranslationY =\n    (-normalizedCanvasHeight * (sceneState.zoom - 1)) / 2;\n  context.translate(zoomTranslationX, zoomTranslationY);\n  context.scale(sceneState.zoom, sceneState.zoom);\n\n  // Paint visible elements\n  const visibleElements = elements.filter((element) =>\n    isVisibleElement(\n      element,\n      normalizedCanvasWidth,\n      normalizedCanvasHeight,\n      sceneState,\n    ),\n  );\n\n  visibleElements.forEach((element) => {\n    renderElement(element, rc, context, renderOptimizations, sceneState);\n    if (\n      isLinearElement(element) &&\n      appState.editingLinearElement &&\n      appState.editingLinearElement.elementId === element.id\n    ) {\n      renderLinearPointHandles(context, appState, sceneState, element);\n    }\n  });\n\n  // Paint selection element\n  if (selectionElement) {\n    renderElement(\n      selectionElement,\n      rc,\n      context,\n      renderOptimizations,\n      sceneState,\n    );\n  }\n\n  // Paint selected elements\n  if (\n    renderSelection &&\n    !appState.multiElement &&\n    !appState.editingLinearElement\n  ) {\n    context.translate(sceneState.scrollX, sceneState.scrollY);\n\n    const selections = elements.reduce((acc, element) => {\n      const selectionColors = [];\n      // local user\n      if (\n        appState.selectedElementIds[element.id] &&\n        !isSelectedViaGroup(appState, element)\n      ) {\n        selectionColors.push(oc.black);\n      }\n      // remote users\n      if (sceneState.remoteSelectedElementIds[element.id]) {\n        selectionColors.push(\n          ...sceneState.remoteSelectedElementIds[element.id].map((socketId) => {\n            const { background } = colorsForClientId(socketId);\n            return background;\n          }),\n        );\n      }\n      if (selectionColors.length) {\n        const [\n          elementX1,\n          elementY1,\n          elementX2,\n          elementY2,\n        ] = getElementAbsoluteCoords(element);\n        acc.push({\n          angle: element.angle,\n          elementX1,\n          elementY1,\n          elementX2,\n          elementY2,\n          selectionColors,\n        });\n      }\n      return acc;\n    }, [] as { angle: number; elementX1: number; elementY1: number; elementX2: number; elementY2: number; selectionColors: string[] }[]);\n\n    function addSelectionForGroupId(groupId: GroupId) {\n      const groupElements = getElementsInGroup(elements, groupId);\n      const [elementX1, elementY1, elementX2, elementY2] = getCommonBounds(\n        groupElements,\n      );\n      selections.push({\n        angle: 0,\n        elementX1,\n        elementX2,\n        elementY1,\n        elementY2,\n        selectionColors: [oc.black],\n      });\n    }\n\n    for (const groupId of getSelectedGroupIds(appState)) {\n      // TODO: support multiplayer selected group IDs\n      addSelectionForGroupId(groupId);\n    }\n\n    if (appState.editingGroupId) {\n      addSelectionForGroupId(appState.editingGroupId);\n    }\n\n    selections.forEach(\n      ({\n        angle,\n        elementX1,\n        elementY1,\n        elementX2,\n        elementY2,\n        selectionColors,\n      }) => {\n        const elementWidth = elementX2 - elementX1;\n        const elementHeight = elementY2 - elementY1;\n\n        const initialLineDash = context.getLineDash();\n        const lineWidth = context.lineWidth;\n        const lineDashOffset = context.lineDashOffset;\n        const strokeStyle = context.strokeStyle;\n\n        const dashedLinePadding = 4 / sceneState.zoom;\n        const dashWidth = 8 / sceneState.zoom;\n        const spaceWidth = 4 / sceneState.zoom;\n\n        context.lineWidth = 1 / sceneState.zoom;\n\n        const count = selectionColors.length;\n        for (var i = 0; i < count; ++i) {\n          context.strokeStyle = selectionColors[i];\n          context.setLineDash([\n            dashWidth,\n            spaceWidth + (dashWidth + spaceWidth) * (count - 1),\n          ]);\n          context.lineDashOffset = (dashWidth + spaceWidth) * i;\n          strokeRectWithRotation(\n            context,\n            elementX1 - dashedLinePadding,\n            elementY1 - dashedLinePadding,\n            elementWidth + dashedLinePadding * 2,\n            elementHeight + dashedLinePadding * 2,\n            elementX1 + elementWidth / 2,\n            elementY1 + elementHeight / 2,\n            angle,\n          );\n        }\n        context.lineDashOffset = lineDashOffset;\n        context.strokeStyle = strokeStyle;\n        context.lineWidth = lineWidth;\n        context.setLineDash(initialLineDash);\n      },\n    );\n    context.translate(-sceneState.scrollX, -sceneState.scrollY);\n\n    const locallySelectedElements = getSelectedElements(elements, appState);\n\n    // Paint resize handlers\n    if (locallySelectedElements.length === 1) {\n      context.translate(sceneState.scrollX, sceneState.scrollY);\n      context.fillStyle = oc.white;\n      const handlers = handlerRectangles(\n        locallySelectedElements[0],\n        sceneState.zoom,\n      );\n      Object.keys(handlers).forEach((key) => {\n        const handler = handlers[key as HandlerRectanglesRet];\n        if (handler !== undefined) {\n          const lineWidth = context.lineWidth;\n          context.lineWidth = 1 / sceneState.zoom;\n          if (key === \"rotation\") {\n            strokeCircle(\n              context,\n              handler[0],\n              handler[1],\n              handler[2],\n              handler[3],\n            );\n          } else {\n            strokeRectWithRotation(\n              context,\n              handler[0],\n              handler[1],\n              handler[2],\n              handler[3],\n              handler[0] + handler[2] / 2,\n              handler[1] + handler[3] / 2,\n              locallySelectedElements[0].angle,\n              true, // fill before stroke\n            );\n          }\n          context.lineWidth = lineWidth;\n        }\n      });\n      context.translate(-sceneState.scrollX, -sceneState.scrollY);\n    } else if (locallySelectedElements.length > 1) {\n      if (canResizeMutlipleElements(locallySelectedElements)) {\n        const dashedLinePadding = 4 / sceneState.zoom;\n        context.translate(sceneState.scrollX, sceneState.scrollY);\n        context.fillStyle = oc.white;\n        const [x1, y1, x2, y2] = getCommonBounds(locallySelectedElements);\n        const initialLineDash = context.getLineDash();\n        context.setLineDash([2 / sceneState.zoom]);\n        const lineWidth = context.lineWidth;\n        context.lineWidth = 1 / sceneState.zoom;\n        strokeRectWithRotation(\n          context,\n          x1 - dashedLinePadding,\n          y1 - dashedLinePadding,\n          x2 - x1 + dashedLinePadding * 2,\n          y2 - y1 + dashedLinePadding * 2,\n          (x1 + x2) / 2,\n          (y1 + y2) / 2,\n          0,\n        );\n        context.lineWidth = lineWidth;\n        context.setLineDash(initialLineDash);\n        const handlers = handlerRectanglesFromCoords(\n          [x1, y1, x2, y2],\n          0,\n          sceneState.zoom,\n          undefined,\n          OMIT_SIDES_FOR_MULTIPLE_ELEMENTS,\n        );\n        Object.keys(handlers).forEach((key) => {\n          const handler = handlers[key as HandlerRectanglesRet];\n          if (handler !== undefined) {\n            const lineWidth = context.lineWidth;\n            context.lineWidth = 1 / sceneState.zoom;\n            strokeRectWithRotation(\n              context,\n              handler[0],\n              handler[1],\n              handler[2],\n              handler[3],\n              handler[0] + handler[2] / 2,\n              handler[1] + handler[3] / 2,\n              0,\n              true, // fill before stroke\n            );\n            context.lineWidth = lineWidth;\n          }\n        });\n        context.translate(-sceneState.scrollX, -sceneState.scrollY);\n      }\n    }\n  }\n\n  // Reset zoom\n  context.scale(1 / sceneState.zoom, 1 / sceneState.zoom);\n  context.translate(-zoomTranslationX, -zoomTranslationY);\n\n  // Paint remote pointers\n  for (const clientId in sceneState.remotePointerViewportCoords) {\n    let { x, y } = sceneState.remotePointerViewportCoords[clientId];\n    const username = sceneState.remotePointerUsernames[clientId];\n\n    const width = 9;\n    const height = 14;\n\n    const isOutOfBounds =\n      x < 0 ||\n      x > normalizedCanvasWidth - width ||\n      y < 0 ||\n      y > normalizedCanvasHeight - height;\n\n    x = Math.max(x, 0);\n    x = Math.min(x, normalizedCanvasWidth - width);\n    y = Math.max(y, 0);\n    y = Math.min(y, normalizedCanvasHeight - height);\n\n    const { background, stroke } = colorsForClientId(clientId);\n\n    const strokeStyle = context.strokeStyle;\n    const fillStyle = context.fillStyle;\n    const globalAlpha = context.globalAlpha;\n    context.strokeStyle = stroke;\n    context.fillStyle = background;\n    if (isOutOfBounds) {\n      context.globalAlpha = 0.2;\n    }\n\n    if (\n      sceneState.remotePointerButton &&\n      sceneState.remotePointerButton[clientId] === \"down\"\n    ) {\n      context.beginPath();\n      context.arc(x, y, 15, 0, 2 * Math.PI, false);\n      context.lineWidth = 3;\n      context.strokeStyle = \"#ffffff88\";\n      context.stroke();\n      context.closePath();\n\n      context.beginPath();\n      context.arc(x, y, 15, 0, 2 * Math.PI, false);\n      context.lineWidth = 1;\n      context.strokeStyle = stroke;\n      context.stroke();\n      context.closePath();\n    }\n\n    context.beginPath();\n    context.moveTo(x, y);\n    context.lineTo(x + 1, y + 14);\n    context.lineTo(x + 4, y + 9);\n    context.lineTo(x + 9, y + 10);\n    context.lineTo(x, y);\n    context.fill();\n    context.stroke();\n\n    if (!isOutOfBounds && username) {\n      const offsetX = x + width;\n      const offsetY = y + height;\n      const paddingHorizontal = 4;\n      const paddingVertical = 4;\n      const measure = context.measureText(username);\n      const measureHeight =\n        measure.actualBoundingBoxDescent + measure.actualBoundingBoxAscent;\n\n      // Border\n      context.fillStyle = stroke;\n      context.globalAlpha = globalAlpha;\n      context.fillRect(\n        offsetX - 1,\n        offsetY - 1,\n        measure.width + 2 * paddingHorizontal + 2,\n        measureHeight + 2 * paddingVertical + 2,\n      );\n      // Background\n      context.fillStyle = background;\n      context.fillRect(\n        offsetX,\n        offsetY,\n        measure.width + 2 * paddingHorizontal,\n        measureHeight + 2 * paddingVertical,\n      );\n      context.fillStyle = oc.white;\n      context.fillText(\n        username,\n        offsetX + paddingHorizontal,\n        offsetY + paddingVertical + measure.actualBoundingBoxAscent,\n      );\n    }\n\n    context.strokeStyle = strokeStyle;\n    context.fillStyle = fillStyle;\n    context.globalAlpha = globalAlpha;\n    context.closePath();\n  }\n\n  // Paint scrollbars\n  let scrollBars;\n  if (renderScrollbars) {\n    scrollBars = getScrollBars(\n      elements,\n      normalizedCanvasWidth,\n      normalizedCanvasHeight,\n      sceneState,\n    );\n\n    const fillStyle = context.fillStyle;\n    const strokeStyle = context.strokeStyle;\n    context.fillStyle = SCROLLBAR_COLOR;\n    context.strokeStyle = \"rgba(255,255,255,0.8)\";\n    [scrollBars.horizontal, scrollBars.vertical].forEach((scrollBar) => {\n      if (scrollBar) {\n        roundRect(\n          context,\n          scrollBar.x,\n          scrollBar.y,\n          scrollBar.width,\n          scrollBar.height,\n          SCROLLBAR_WIDTH / 2,\n        );\n      }\n    });\n    context.fillStyle = fillStyle;\n    context.strokeStyle = strokeStyle;\n  }\n\n  context.scale(1 / scale, 1 / scale);\n\n  return { atLeastOneVisibleElement: visibleElements.length > 0, scrollBars };\n};\n\nconst isVisibleElement = (\n  element: ExcalidrawElement,\n  viewportWidth: number,\n  viewportHeight: number,\n  {\n    scrollX,\n    scrollY,\n    zoom,\n  }: {\n    scrollX: FlooredNumber;\n    scrollY: FlooredNumber;\n    zoom: number;\n  },\n) => {\n  const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n\n  // Apply zoom\n  const viewportWidthWithZoom = viewportWidth / zoom;\n  const viewportHeightWithZoom = viewportHeight / zoom;\n\n  const viewportWidthDiff = viewportWidth - viewportWidthWithZoom;\n  const viewportHeightDiff = viewportHeight - viewportHeightWithZoom;\n\n  return (\n    x2 + scrollX - viewportWidthDiff / 2 >= 0 &&\n    x1 + scrollX - viewportWidthDiff / 2 <= viewportWidthWithZoom &&\n    y2 + scrollY - viewportHeightDiff / 2 >= 0 &&\n    y1 + scrollY - viewportHeightDiff / 2 <= viewportHeightWithZoom\n  );\n};\n\n// This should be only called for exporting purposes\nexport const renderSceneToSvg = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  rsvg: RoughSVG,\n  svgRoot: SVGElement,\n  {\n    offsetX = 0,\n    offsetY = 0,\n  }: {\n    offsetX?: number;\n    offsetY?: number;\n  } = {},\n) => {\n  if (!svgRoot) {\n    return;\n  }\n  // render elements\n  elements.forEach((element) => {\n    if (!element.isDeleted) {\n      renderElementToSvg(\n        element,\n        rsvg,\n        svgRoot,\n        element.x + offsetX,\n        element.y + offsetY,\n      );\n    }\n  });\n};\n","import rough from \"roughjs/bin/rough\";\nimport oc from \"open-color\";\nimport { newTextElement } from \"../element\";\nimport { NonDeletedExcalidrawElement } from \"../element/types\";\nimport { getCommonBounds } from \"../element/bounds\";\nimport { renderScene, renderSceneToSvg } from \"../renderer/renderScene\";\nimport { distance, SVG_NS, measureText, getFontString } from \"../utils\";\nimport { normalizeScroll } from \"./scroll\";\nimport { AppState } from \"../types\";\nimport { t } from \"../i18n\";\nimport { DEFAULT_FONT_FAMILY } from \"../appState\";\n\nexport const SVG_EXPORT_TAG = `<!-- svg-source:excalidraw -->`;\n\nexport const exportToCanvas = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n  {\n    exportBackground,\n    exportPadding = 10,\n    viewBackgroundColor,\n    scale = 1,\n    shouldAddWatermark,\n  }: {\n    exportBackground: boolean;\n    exportPadding?: number;\n    scale?: number;\n    viewBackgroundColor: string;\n    shouldAddWatermark: boolean;\n  },\n  createCanvas: (width: number, height: number) => any = (width, height) => {\n    const tempCanvas = document.createElement(\"canvas\");\n    tempCanvas.width = width * scale;\n    tempCanvas.height = height * scale;\n    return tempCanvas;\n  },\n) => {\n  let sceneElements = elements;\n  if (shouldAddWatermark) {\n    const [, , maxX, maxY] = getCommonBounds(elements);\n    sceneElements = [...sceneElements, getWatermarkElement(maxX, maxY)];\n  }\n\n  // calculate smallest area to fit the contents in\n  const [minX, minY, maxX, maxY] = getCommonBounds(sceneElements);\n  const width = distance(minX, maxX) + exportPadding * 2;\n  const height =\n    distance(minY, maxY) +\n    exportPadding +\n    (shouldAddWatermark ? 0 : exportPadding);\n\n  const tempCanvas: any = createCanvas(width, height);\n\n  renderScene(\n    sceneElements,\n    appState,\n    null,\n    scale,\n    rough.canvas(tempCanvas),\n    tempCanvas,\n    {\n      viewBackgroundColor: exportBackground ? viewBackgroundColor : null,\n      scrollX: normalizeScroll(-minX + exportPadding),\n      scrollY: normalizeScroll(-minY + exportPadding),\n      zoom: 1,\n      remotePointerViewportCoords: {},\n      remoteSelectedElementIds: {},\n      shouldCacheIgnoreZoom: false,\n      remotePointerUsernames: {},\n    },\n    {\n      renderScrollbars: false,\n      renderSelection: false,\n      renderOptimizations: false,\n    },\n  );\n\n  return tempCanvas;\n};\n\nexport const exportToSvg = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  {\n    exportBackground,\n    exportPadding = 10,\n    viewBackgroundColor,\n    shouldAddWatermark,\n  }: {\n    exportBackground: boolean;\n    exportPadding?: number;\n    viewBackgroundColor: string;\n    shouldAddWatermark: boolean;\n  },\n): SVGSVGElement => {\n  let sceneElements = elements;\n  if (shouldAddWatermark) {\n    const [, , maxX, maxY] = getCommonBounds(elements);\n    sceneElements = [...sceneElements, getWatermarkElement(maxX, maxY)];\n  }\n\n  // calculate canvas dimensions\n  const [minX, minY, maxX, maxY] = getCommonBounds(sceneElements);\n  const width = distance(minX, maxX) + exportPadding * 2;\n  const height =\n    distance(minY, maxY) +\n    exportPadding +\n    (shouldAddWatermark ? 0 : exportPadding);\n\n  // initialze SVG root\n  const svgRoot = document.createElementNS(SVG_NS, \"svg\");\n  svgRoot.setAttribute(\"version\", \"1.1\");\n  svgRoot.setAttribute(\"xmlns\", SVG_NS);\n  svgRoot.setAttribute(\"viewBox\", `0 0 ${width} ${height}`);\n\n  svgRoot.innerHTML = `\n  ${SVG_EXPORT_TAG}\n  <defs>\n    <style>\n      @font-face {\n        font-family: \"Virgil\";\n        src: url(\"https://excalidraw.com/FG_Virgil.woff2\");\n      }\n      @font-face {\n        font-family: \"Cascadia\";\n        src: url(\"https://excalidraw.com/Cascadia.woff2\");\n      }\n    </style>\n  </defs>\n  `;\n\n  // render backgroiund rect\n  if (exportBackground && viewBackgroundColor) {\n    const rect = svgRoot.ownerDocument!.createElementNS(SVG_NS, \"rect\");\n    rect.setAttribute(\"x\", \"0\");\n    rect.setAttribute(\"y\", \"0\");\n    rect.setAttribute(\"width\", `${width}`);\n    rect.setAttribute(\"height\", `${height}`);\n    rect.setAttribute(\"fill\", viewBackgroundColor);\n    svgRoot.appendChild(rect);\n  }\n\n  const rsvg = rough.svg(svgRoot);\n  renderSceneToSvg(sceneElements, rsvg, svgRoot, {\n    offsetX: -minX + exportPadding,\n    offsetY: -minY + exportPadding,\n  });\n\n  return svgRoot;\n};\n\nconst getWatermarkElement = (maxX: number, maxY: number) => {\n  const text = t(\"labels.madeWithExcalidraw\");\n  const fontSize = 16;\n  const fontFamily = DEFAULT_FONT_FAMILY;\n  const { width: textWidth } = measureText(\n    text,\n    getFontString({ fontSize, fontFamily }),\n  );\n\n  return newTextElement({\n    text,\n    fontSize,\n    fontFamily,\n    textAlign: \"center\",\n    x: maxX - textWidth / 2,\n    y: maxY + 16,\n    strokeColor: oc.gray[5],\n    backgroundColor: \"transparent\",\n    fillStyle: \"hachure\",\n    strokeWidth: 1,\n    strokeStyle: \"solid\",\n    roughness: 1,\n    opacity: 100,\n  });\n};\n","import {\n  ExcalidrawElement,\n  NonDeletedExcalidrawElement,\n} from \"./element/types\";\nimport { getSelectedElements } from \"./scene\";\nimport { AppState } from \"./types\";\nimport { SVG_EXPORT_TAG } from \"./scene/export\";\n\nlet CLIPBOARD = \"\";\nlet PREFER_APP_CLIPBOARD = false;\n\nexport const probablySupportsClipboardReadText =\n  \"clipboard\" in navigator && \"readText\" in navigator.clipboard;\n\nexport const probablySupportsClipboardWriteText =\n  \"clipboard\" in navigator && \"writeText\" in navigator.clipboard;\n\nexport const probablySupportsClipboardBlob =\n  \"clipboard\" in navigator &&\n  \"write\" in navigator.clipboard &&\n  \"ClipboardItem\" in window &&\n  \"toBlob\" in HTMLCanvasElement.prototype;\n\nexport const copyToAppClipboard = async (\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n) => {\n  CLIPBOARD = JSON.stringify(getSelectedElements(elements, appState));\n  try {\n    // when copying to in-app clipboard, clear system clipboard so that if\n    //  system clip contains text on paste we know it was copied *after* user\n    //  copied elements, and thus we should prefer the text content.\n    await copyTextToSystemClipboard(null);\n    PREFER_APP_CLIPBOARD = false;\n  } catch {\n    // if clearing system clipboard didn't work, we should prefer in-app\n    //  clipboard even if there's text in system clipboard on paste, because\n    //  we can't be sure of the order of copy operations\n    PREFER_APP_CLIPBOARD = true;\n  }\n};\n\nexport const getAppClipboard = (): {\n  elements?: readonly ExcalidrawElement[];\n} => {\n  if (!CLIPBOARD) {\n    return {};\n  }\n\n  try {\n    const clipboardElements = JSON.parse(CLIPBOARD);\n\n    if (\n      Array.isArray(clipboardElements) &&\n      clipboardElements.length > 0 &&\n      clipboardElements[0].type // need to implement a better check here...\n    ) {\n      return { elements: clipboardElements };\n    }\n  } catch (error) {\n    console.error(error);\n  }\n\n  return {};\n};\n\nexport const getClipboardContent = async (\n  event: ClipboardEvent | null,\n): Promise<{\n  text?: string;\n  elements?: readonly ExcalidrawElement[];\n}> => {\n  try {\n    const text = event\n      ? event.clipboardData?.getData(\"text/plain\").trim()\n      : probablySupportsClipboardReadText &&\n        (await navigator.clipboard.readText());\n\n    if (text && !PREFER_APP_CLIPBOARD && !text.includes(SVG_EXPORT_TAG)) {\n      return { text };\n    }\n  } catch (error) {\n    console.error(error);\n  }\n\n  return getAppClipboard();\n};\n\nexport const copyCanvasToClipboardAsPng = async (canvas: HTMLCanvasElement) =>\n  new Promise((resolve, reject) => {\n    try {\n      canvas.toBlob(async (blob: any) => {\n        try {\n          await navigator.clipboard.write([\n            new window.ClipboardItem({ \"image/png\": blob }),\n          ]);\n          resolve();\n        } catch (error) {\n          reject(error);\n        }\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n\nexport const copyCanvasToClipboardAsSvg = async (svgroot: SVGSVGElement) => {\n  try {\n    await navigator.clipboard.writeText(svgroot.outerHTML);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const copyTextToSystemClipboard = async (text: string | null) => {\n  let copied = false;\n  if (probablySupportsClipboardWriteText) {\n    try {\n      // NOTE: doesn't work on FF on non-HTTPS domains, or when document\n      //  not focused\n      await navigator.clipboard.writeText(text || \"\");\n      copied = true;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  // Note that execCommand doesn't allow copying empty strings, so if we're\n  //  clearing clipboard using this API, we must copy at least an empty char\n  if (!copied && !copyTextViaExecCommand(text || \" \")) {\n    throw new Error(\"couldn't copy\");\n  }\n};\n\n// adapted from https://github.com/zenorocha/clipboard.js/blob/ce79f170aa655c408b6aab33c9472e8e4fa52e19/src/clipboard-action.js#L48\nconst copyTextViaExecCommand = (text: string) => {\n  const isRTL = document.documentElement.getAttribute(\"dir\") === \"rtl\";\n\n  const textarea = document.createElement(\"textarea\");\n\n  textarea.style.border = \"0\";\n  textarea.style.padding = \"0\";\n  textarea.style.margin = \"0\";\n  textarea.style.position = \"absolute\";\n  textarea.style[isRTL ? \"right\" : \"left\"] = \"-9999px\";\n  const yPosition = window.pageYOffset || document.documentElement.scrollTop;\n  textarea.style.top = `${yPosition}px`;\n  // Prevent zooming on iOS\n  textarea.style.fontSize = \"12pt\";\n\n  textarea.setAttribute(\"readonly\", \"\");\n  textarea.value = text;\n\n  document.body.appendChild(textarea);\n\n  let success = false;\n\n  try {\n    textarea.select();\n    textarea.setSelectionRange(0, textarea.value.length);\n\n    success = document.execCommand(\"copy\");\n  } catch (error) {\n    console.error(error);\n  }\n\n  textarea.remove();\n\n  return success;\n};\n","import {\n  ExcalidrawElement,\n  FontFamily,\n  ExcalidrawSelectionElement,\n} from \"../element/types\";\nimport { AppState } from \"../types\";\nimport { DataState } from \"./types\";\nimport { isInvisiblySmallElement, getNormalizedDimensions } from \"../element\";\nimport { calculateScrollCenter } from \"../scene\";\nimport { randomId } from \"../random\";\nimport { DEFAULT_TEXT_ALIGN, DEFAULT_FONT_FAMILY } from \"../appState\";\nimport { FONT_FAMILY } from \"../constants\";\n\nconst getFontFamilyByName = (fontFamilyName: string): FontFamily => {\n  for (const [id, fontFamilyString] of Object.entries(FONT_FAMILY)) {\n    if (fontFamilyString.includes(fontFamilyName)) {\n      return parseInt(id) as FontFamily;\n    }\n  }\n  return DEFAULT_FONT_FAMILY;\n};\n\nfunction migrateElementWithProperties<T extends ExcalidrawElement>(\n  element: T,\n  extra: Omit<T, keyof ExcalidrawElement>,\n): T {\n  const base: Pick<T, keyof ExcalidrawElement> = {\n    type: element.type,\n    // all elements must have version > 0 so getDrawingVersion() will pick up\n    //  newly added elements\n    version: element.version || 1,\n    versionNonce: element.versionNonce ?? 0,\n    isDeleted: false,\n    id: element.id || randomId(),\n    fillStyle: element.fillStyle || \"hachure\",\n    strokeWidth: element.strokeWidth || 1,\n    strokeStyle: element.strokeStyle ?? \"solid\",\n    roughness: element.roughness ?? 1,\n    opacity: element.opacity == null ? 100 : element.opacity,\n    angle: element.angle || 0,\n    x: element.x || 0,\n    y: element.y || 0,\n    strokeColor: element.strokeColor,\n    backgroundColor: element.backgroundColor,\n    width: element.width || 0,\n    height: element.height || 0,\n    seed: element.seed ?? 1,\n    groupIds: element.groupIds || [],\n  };\n\n  return {\n    ...base,\n    ...getNormalizedDimensions(base),\n    ...extra,\n  } as T;\n}\n\nconst migrateElement = (\n  element: Exclude<ExcalidrawElement, ExcalidrawSelectionElement>,\n): typeof element => {\n  switch (element.type) {\n    case \"text\":\n      let fontSize = element.fontSize;\n      let fontFamily = element.fontFamily;\n      if (\"font\" in element) {\n        const [fontPx, _fontFamily]: [\n          string,\n          string,\n        ] = (element as any).font.split(\" \");\n        fontSize = parseInt(fontPx, 10);\n        fontFamily = getFontFamilyByName(_fontFamily);\n      }\n      return migrateElementWithProperties(element, {\n        fontSize,\n        fontFamily,\n        text: element.text ?? \"\",\n        baseline: element.baseline,\n        textAlign: element.textAlign ?? DEFAULT_TEXT_ALIGN,\n      });\n    case \"draw\":\n    case \"line\":\n    case \"arrow\": {\n      return migrateElementWithProperties(element, {\n        points:\n          // migrate old arrow model to new one\n          !Array.isArray(element.points) || element.points.length < 2\n            ? [\n                [0, 0],\n                [element.width, element.height],\n              ]\n            : element.points,\n      });\n    }\n    // generic elements\n    case \"ellipse\":\n    case \"rectangle\":\n    case \"diamond\":\n      return migrateElementWithProperties(element, {});\n\n    // don't use default case so as to catch a missing an element type case\n    //  (we also don't want to throw, but instead return void so we\n    //   filter out these unsupported elements from the restored array)\n  }\n};\n\nexport const restore = (\n  savedElements: readonly ExcalidrawElement[],\n  savedState: AppState | null,\n  opts?: { scrollToContent: boolean },\n): DataState => {\n  const elements = savedElements.reduce((elements, element) => {\n    // filtering out selection, which is legacy, no longer kept in elements,\n    //  and causing issues if retained\n    if (element.type !== \"selection\" && !isInvisiblySmallElement(element)) {\n      const migratedElement = migrateElement(element);\n      if (migratedElement) {\n        elements.push(migratedElement);\n      }\n    }\n    return elements;\n  }, [] as ExcalidrawElement[]);\n\n  if (opts?.scrollToContent && savedState) {\n    savedState = {\n      ...savedState,\n      ...calculateScrollCenter(elements, savedState, null),\n    };\n  }\n\n  return {\n    elements: elements,\n    appState: savedState,\n  };\n};\n","import {\n  ExcalidrawElement,\n  NonDeletedExcalidrawElement,\n} from \"../element/types\";\n\nimport { getDefaultAppState } from \"../appState\";\n\nimport { AppState } from \"../types\";\nimport { exportToCanvas, exportToSvg } from \"../scene/export\";\nimport { fileSave } from \"browser-nativefs\";\n\nimport { t } from \"../i18n\";\nimport {\n  copyCanvasToClipboardAsPng,\n  copyCanvasToClipboardAsSvg,\n} from \"../clipboard\";\nimport { serializeAsJSON } from \"./json\";\n\nimport { ExportType } from \"../scene/types\";\nimport { restore } from \"./restore\";\nimport { restoreFromLocalStorage } from \"./localStorage\";\n\nexport { loadFromBlob } from \"./blob\";\nexport { saveAsJSON, loadFromJSON } from \"./json\";\nexport { saveToLocalStorage } from \"./localStorage\";\n\nconst BACKEND_GET = \"https://json.excalidraw.com/api/v1/\";\n\nconst BACKEND_V2_POST = \"https://json.excalidraw.com/api/v2/post/\";\nconst BACKEND_V2_GET = \"https://json.excalidraw.com/api/v2/\";\n\nexport const SOCKET_SERVER = \"https://excalidraw-socket.herokuapp.com\";\n\nexport type EncryptedData = {\n  data: ArrayBuffer;\n  iv: Uint8Array;\n};\n\nexport type SocketUpdateDataSource = {\n  SCENE_INIT: {\n    type: \"SCENE_INIT\";\n    payload: {\n      elements: readonly ExcalidrawElement[];\n    };\n  };\n  SCENE_UPDATE: {\n    type: \"SCENE_UPDATE\";\n    payload: {\n      elements: readonly ExcalidrawElement[];\n    };\n  };\n  MOUSE_LOCATION: {\n    type: \"MOUSE_LOCATION\";\n    payload: {\n      socketID: string;\n      pointerCoords: { x: number; y: number };\n      button: \"down\" | \"up\";\n      selectedElementIds: AppState[\"selectedElementIds\"];\n      username: string;\n    };\n  };\n};\n\nexport type SocketUpdateDataIncoming =\n  | SocketUpdateDataSource[keyof SocketUpdateDataSource]\n  | {\n      type: \"INVALID_RESPONSE\";\n    };\n\n// TODO: Defined globally, since file handles aren't yet serializable.\n// Once `FileSystemFileHandle` can be serialized, make this\n// part of `AppState`.\n(window as any).handle = null;\n\nconst byteToHex = (byte: number): string => `0${byte.toString(16)}`.slice(-2);\n\nconst generateRandomID = async () => {\n  const arr = new Uint8Array(10);\n  window.crypto.getRandomValues(arr);\n  return Array.from(arr, byteToHex).join(\"\");\n};\n\nconst generateEncryptionKey = async () => {\n  const key = await window.crypto.subtle.generateKey(\n    {\n      name: \"AES-GCM\",\n      length: 128,\n    },\n    true, // extractable\n    [\"encrypt\", \"decrypt\"],\n  );\n  return (await window.crypto.subtle.exportKey(\"jwk\", key)).k;\n};\n\nconst createIV = () => {\n  const arr = new Uint8Array(12);\n  return window.crypto.getRandomValues(arr);\n};\n\nexport const getCollaborationLinkData = (link: string) => {\n  if (link.length === 0) {\n    return;\n  }\n  const hash = new URL(link).hash;\n  return hash.match(/^#room=([a-zA-Z0-9_-]+),([a-zA-Z0-9_-]+)$/);\n};\n\nexport const generateCollaborationLink = async () => {\n  const id = await generateRandomID();\n  const key = await generateEncryptionKey();\n  return `${window.location.origin}${window.location.pathname}#room=${id},${key}`;\n};\n\nconst getImportedKey = (key: string, usage: KeyUsage) =>\n  window.crypto.subtle.importKey(\n    \"jwk\",\n    {\n      alg: \"A128GCM\",\n      ext: true,\n      k: key,\n      key_ops: [\"encrypt\", \"decrypt\"],\n      kty: \"oct\",\n    },\n    {\n      name: \"AES-GCM\",\n      length: 128,\n    },\n    false, // extractable\n    [usage],\n  );\n\nexport const encryptAESGEM = async (\n  data: Uint8Array,\n  key: string,\n): Promise<EncryptedData> => {\n  const importedKey = await getImportedKey(key, \"encrypt\");\n  const iv = createIV();\n  return {\n    data: await window.crypto.subtle.encrypt(\n      {\n        name: \"AES-GCM\",\n        iv,\n      },\n      importedKey,\n      data,\n    ),\n    iv,\n  };\n};\n\nexport const decryptAESGEM = async (\n  data: ArrayBuffer,\n  key: string,\n  iv: Uint8Array,\n): Promise<SocketUpdateDataIncoming> => {\n  try {\n    const importedKey = await getImportedKey(key, \"decrypt\");\n    const decrypted = await window.crypto.subtle.decrypt(\n      {\n        name: \"AES-GCM\",\n        iv: iv,\n      },\n      importedKey,\n      data,\n    );\n\n    const decodedData = new TextDecoder(\"utf-8\").decode(\n      new Uint8Array(decrypted) as any,\n    );\n    return JSON.parse(decodedData);\n  } catch (error) {\n    window.alert(t(\"alerts.decryptFailed\"));\n    console.error(error);\n  }\n  return {\n    type: \"INVALID_RESPONSE\",\n  };\n};\n\nexport const exportToBackend = async (\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n) => {\n  const json = serializeAsJSON(elements, appState);\n  const encoded = new TextEncoder().encode(json);\n\n  const key = await window.crypto.subtle.generateKey(\n    {\n      name: \"AES-GCM\",\n      length: 128,\n    },\n    true, // extractable\n    [\"encrypt\", \"decrypt\"],\n  );\n  // The iv is set to 0. We are never going to reuse the same key so we don't\n  // need to have an iv. (I hope that's correct...)\n  const iv = new Uint8Array(12);\n  // We use symmetric encryption. AES-GCM is the recommended algorithm and\n  // includes checks that the ciphertext has not been modified by an attacker.\n  const encrypted = await window.crypto.subtle.encrypt(\n    {\n      name: \"AES-GCM\",\n      iv: iv,\n    },\n    key,\n    encoded,\n  );\n  // We use jwk encoding to be able to extract just the base64 encoded key.\n  // We will hardcode the rest of the attributes when importing back the key.\n  const exportedKey = await window.crypto.subtle.exportKey(\"jwk\", key);\n\n  try {\n    const response = await fetch(BACKEND_V2_POST, {\n      method: \"POST\",\n      body: encrypted,\n    });\n    const json = await response.json();\n    if (json.id) {\n      const url = new URL(window.location.href);\n      // We need to store the key (and less importantly the id) as hash instead\n      // of queryParam in order to never send it to the server\n      url.hash = `json=${json.id},${exportedKey.k!}`;\n      const urlString = url.toString();\n\n      window.prompt(`🔒${t(\"alerts.uploadedSecurly\")}`, urlString);\n    } else {\n      window.alert(t(\"alerts.couldNotCreateShareableLink\"));\n    }\n  } catch (error) {\n    console.error(error);\n    window.alert(t(\"alerts.couldNotCreateShareableLink\"));\n  }\n};\n\nexport const importFromBackend = async (\n  id: string | null,\n  privateKey: string | undefined,\n) => {\n  let elements: readonly ExcalidrawElement[] = [];\n  let appState: AppState = getDefaultAppState();\n\n  try {\n    const response = await fetch(\n      privateKey ? `${BACKEND_V2_GET}${id}` : `${BACKEND_GET}${id}.json`,\n    );\n    if (!response.ok) {\n      window.alert(t(\"alerts.importBackendFailed\"));\n      return restore(elements, appState, { scrollToContent: true });\n    }\n    let data;\n    if (privateKey) {\n      const buffer = await response.arrayBuffer();\n      const key = await getImportedKey(privateKey, \"decrypt\");\n      const iv = new Uint8Array(12);\n      const decrypted = await window.crypto.subtle.decrypt(\n        {\n          name: \"AES-GCM\",\n          iv: iv,\n        },\n        key,\n        buffer,\n      );\n      // We need to convert the decrypted array buffer to a string\n      const string = new window.TextDecoder(\"utf-8\").decode(\n        new Uint8Array(decrypted) as any,\n      );\n      data = JSON.parse(string);\n    } else {\n      // Legacy format\n      data = await response.json();\n    }\n\n    elements = data.elements || elements;\n    appState = { ...appState, ...data.appState };\n  } catch (error) {\n    window.alert(t(\"alerts.importBackendFailed\"));\n    console.error(error);\n  } finally {\n    return restore(elements, appState, { scrollToContent: true });\n  }\n};\n\nexport const exportCanvas = async (\n  type: ExportType,\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n  canvas: HTMLCanvasElement,\n  {\n    exportBackground,\n    exportPadding = 10,\n    viewBackgroundColor,\n    name,\n    scale = 1,\n    shouldAddWatermark,\n  }: {\n    exportBackground: boolean;\n    exportPadding?: number;\n    viewBackgroundColor: string;\n    name: string;\n    scale?: number;\n    shouldAddWatermark: boolean;\n  },\n) => {\n  if (elements.length === 0) {\n    return window.alert(t(\"alerts.cannotExportEmptyCanvas\"));\n  }\n  if (type === \"svg\" || type === \"clipboard-svg\") {\n    const tempSvg = exportToSvg(elements, {\n      exportBackground,\n      viewBackgroundColor,\n      exportPadding,\n      shouldAddWatermark,\n    });\n    if (type === \"svg\") {\n      await fileSave(new Blob([tempSvg.outerHTML], { type: \"image/svg+xml\" }), {\n        fileName: `${name}.svg`,\n      });\n      return;\n    } else if (type === \"clipboard-svg\") {\n      copyCanvasToClipboardAsSvg(tempSvg);\n      return;\n    }\n  }\n\n  const tempCanvas = exportToCanvas(elements, appState, {\n    exportBackground,\n    viewBackgroundColor,\n    exportPadding,\n    scale,\n    shouldAddWatermark,\n  });\n  tempCanvas.style.display = \"none\";\n  document.body.appendChild(tempCanvas);\n\n  if (type === \"png\") {\n    const fileName = `${name}.png`;\n    tempCanvas.toBlob(async (blob: any) => {\n      if (blob) {\n        await fileSave(blob, {\n          fileName: fileName,\n        });\n      }\n    });\n  } else if (type === \"clipboard\") {\n    try {\n      copyCanvasToClipboardAsPng(tempCanvas);\n    } catch {\n      window.alert(t(\"alerts.couldNotCopyToClipboard\"));\n    }\n  } else if (type === \"backend\") {\n    const appState = getDefaultAppState();\n    if (exportBackground) {\n      appState.viewBackgroundColor = viewBackgroundColor;\n    }\n    exportToBackend(elements, appState);\n  }\n\n  // clean up the DOM\n  if (tempCanvas !== canvas) {\n    tempCanvas.remove();\n  }\n};\n\nexport const loadScene = async (id: string | null, privateKey?: string) => {\n  let data;\n  if (id != null) {\n    // the private key is used to decrypt the content from the server, take\n    // extra care not to leak it\n    data = await importFromBackend(id, privateKey);\n    window.history.replaceState({}, \"Excalidraw\", window.location.origin);\n  } else {\n    data = restoreFromLocalStorage();\n  }\n\n  return {\n    elements: data.elements,\n    appState: data.appState && { ...data.appState },\n    commitToHistory: false,\n  };\n};\n","import { useEffect, useCallback } from \"react\";\n\nconst getMousePosition = (\n  svg: SVGSVGElement,\n  event: MouseEvent\n): [number, number] => {\n  const CTM = svg.getScreenCTM();\n  if (!CTM) {\n    console.warn(\"failed to get screen CTM\");\n    return [event.clientX, event.clientY];\n  }\n  return [(event.clientX - CTM.e) / CTM.a, (event.clientY - CTM.f) / CTM.d];\n};\n\nconst makeDraggable = (svg: SVGSVGElement) => {\n  const draggableElements: SVGElement[] = [];\n  let draggingElementIndex = -1;\n  let offsetX = 0;\n  let offsetY = 0;\n  svg.childNodes.forEach((ele) => {\n    if (ele instanceof SVGElement && ele.nodeType === Node.ELEMENT_NODE) {\n      const transform = ele.getAttribute(\"transform\");\n      if (!transform) return;\n      const match = /translate\\(([0-9.]+) ([0-9.]+)\\)/.exec(transform);\n      if (!match) return;\n      draggableElements.unshift(ele);\n    }\n  });\n  svg.addEventListener(\"mousedown\", (event) => {\n    const index = draggableElements.findIndex((ele) => {\n      const [clientRect] = ele.getClientRects();\n      return (\n        clientRect.x <= event.clientX &&\n        event.clientX <= clientRect.x + clientRect.width &&\n        clientRect.y <= event.clientY &&\n        event.clientY <= clientRect.y + clientRect.height\n      );\n    });\n    if (index === -1) return;\n    const ele = draggableElements[index];\n    const position = getMousePosition(svg, event);\n    const transform = ele.getAttribute(\"transform\");\n    if (!transform) return;\n    const match = /translate\\(([0-9.]+) ([0-9.]+)\\)/.exec(transform);\n    if (!match) return;\n    offsetX = position[0] - Number(match[1]);\n    offsetY = position[1] - Number(match[2]);\n    draggingElementIndex = index;\n  });\n  svg.addEventListener(\"mousemove\", (event) => {\n    if (draggingElementIndex === -1) return;\n    const position = getMousePosition(svg, event);\n    const x = position[0] - offsetX;\n    const y = position[1] - offsetY;\n    const ele = draggableElements[draggingElementIndex];\n    const transform = ele.getAttribute(\"transform\");\n    if (!transform) return;\n    ele.setAttribute(\n      \"transform\",\n      transform.replace(/translate\\(.*?\\)/, `translate(${x} ${y})`)\n    );\n  });\n  svg.addEventListener(\"mouseup\", (_event) => {\n    draggingElementIndex = -1;\n  });\n  svg.addEventListener(\"mouseleave\", (_event) => {\n    draggingElementIndex = -1;\n  });\n};\n\nexport const useDraggableSvg = (\n  svg: SVGSVGElement | undefined,\n  containerRef: React.RefObject<HTMLDivElement>\n) => {\n  useEffect(() => {\n    if (containerRef.current && svg) {\n      makeDraggable(svg);\n      containerRef.current.appendChild(svg);\n    }\n  }, [containerRef, svg]);\n  const getSvgHtml = useCallback(() => {\n    if (containerRef.current) {\n      return containerRef.current.innerHTML;\n    }\n    return undefined;\n  }, [containerRef]);\n  return { getSvgHtml };\n};\n","import { useCallback, useState } from \"react\";\n\nconst resourceCache = new Map<string, string>();\n\nconst embedUrlResources = async (text: string) => {\n  const urls = text.match(/url\\(\".*?\"\\);/g) || [];\n  const resources = await Promise.all(\n    urls.map(\n      (url) =>\n        new Promise<string>((resolve, reject) => {\n          url = url.slice(5, -3);\n          if (resourceCache.has(url)) {\n            resolve(resourceCache.get(url));\n            return;\n          }\n          fetch(url)\n            .then((response) => response.blob())\n            .then((blob) => {\n              const reader = new FileReader();\n              reader.onload = () => {\n                const resource = `url(${reader.result});`;\n                resourceCache.set(url, resource);\n                resolve(resource);\n              };\n              reader.onerror = reject;\n              reader.readAsDataURL(blob);\n            })\n            .catch(reject);\n        })\n    )\n  );\n  return text.replace(/url\\(\".*?\"\\);/g, () => resources.shift() as string);\n};\n\nlet count = 0;\n\nexport const useSnapshots = () => {\n  const [snapshots, setSnapshots] = useState<\n    {\n      id: string;\n      image: HTMLImageElement;\n    }[]\n  >([]);\n\n  const addSnapshot = useCallback(async (svgHtml?: string) => {\n    if (!svgHtml) return;\n    const html = await embedUrlResources(svgHtml);\n    const image = new Image();\n    image.src = \"data:image/svg+xml;base64,\" + btoa(html);\n    image.onload = () => {\n      setSnapshots((prev) => [...prev, { image, id: String(++count) }]);\n    };\n  }, []);\n\n  return {\n    snapshots,\n    addSnapshot,\n  };\n};\n","import React, { useRef } from \"react\";\nimport \"./App.css\";\n\nimport { Image } from \"./Image\";\nimport { useLoadSvg } from \"./useLoadSvg\";\nimport { useDraggableSvg } from \"./useDraggableSvg\";\nimport { useSnapshots } from \"./useSnapshots\";\n\nconst App: React.FC = () => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { svg } = useLoadSvg();\n  const { getSvgHtml } = useDraggableSvg(svg, containerRef);\n  const { snapshots, addSnapshot } = useSnapshots();\n  const add = () => addSnapshot(getSvgHtml());\n  return (\n    <div className=\"App\">\n      <div className=\"toolbar\">\n        <button type=\"button\" onClick={add}>\n          Add\n        </button>\n      </div>\n      <div className=\"svg\">\n        <div ref={containerRef}></div>\n      </div>\n      <div className=\"snapshots\">\n        {snapshots.map((snapshot) => (\n          <div\n            key={snapshot.id}\n            onClick={(e) => (e.target as any).scrollIntoView()}\n          >\n            <Image image={snapshot.image} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { useEffect, useState } from \"react\";\n\nimport { importFromBackend } from \"./excalidraw/src/data/index\";\nimport { exportToSvg } from \"./excalidraw/src/scene/export\";\nimport { getNonDeletedElements } from \"./excalidraw/src/element\";\n\nexport const useLoadSvg = () => {\n  const [loading, setLoading] = useState(true);\n  const [loadedSvg, setLoadedSvg] = useState<SVGSVGElement>();\n\n  useEffect(() => {\n    (async () => {\n      const hash = window.location.hash.slice(1);\n      const searchParams = new URLSearchParams(hash);\n      const match = /([0-9]+),?([a-zA-Z0-9_-]*)/.exec(\n        searchParams.get(\"json\") || \"\"\n      );\n      if (!match) {\n        console.log(\"no json found\");\n        setLoading(false);\n        return;\n      }\n      const [, id, key] = match;\n      const { elements } = await importFromBackend(id, key);\n      const svg = exportToSvg(getNonDeletedElements(elements), {\n        exportBackground: true,\n        exportPadding: 30,\n        viewBackgroundColor: \"white\",\n        shouldAddWatermark: false,\n      });\n      setLoadedSvg(svg);\n      console.log(svg);\n      setLoading(false);\n    })();\n  }, []);\n\n  return { svg: loadedSvg, loading };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}